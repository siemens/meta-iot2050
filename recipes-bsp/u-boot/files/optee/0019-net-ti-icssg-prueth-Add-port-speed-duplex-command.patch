From 8666f686bd3d8efb164c99569382e83f458bb206 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 4 Mar 2020 23:33:33 +0000
Subject: [PATCH 19/25] net: ti: icssg-prueth: Add port speed/duplex command

This patch adds port speed/duplex command to firmware once
the link is up. ICSSG firmware uses default of 10M Half duplex
and IPG (interpacket gap) value is hard coded to that for 10M.
The hardcoded value is used since TX IPG register doesn't have
enough bits to configure IPG value for 10M. So without this
command, firmware continues to use the default IPG value even
when speed/duplex negotiated by PHY is different than the above.
Driver uses hardcoded value of flow id for RX management
channel similar to existing flow id usage for RX data channel.
However added a sanity check in the prueth_start() to make sure
the RX channel flow id base is matching to the hardcoded value
to catch any future changes to the RX channel usage. Current
design of the driver doesn't allow do this in a clean way.
As part of prueth_start(), driver creates the port speed/duplex
command and sends the same to the ICSSG over the same tx data
channel that is used for the Ethernet frames. However the
command response is returned over the RX management channel.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Acked-by: Roger Quadros <rogerq@ti.com>
[Jan: adjust some dev_err calls]
Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 drivers/net/ti/icssg-prueth.c | 147 +++++++++++++++++++++++++++++++++-
 1 file changed, 146 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ti/icssg-prueth.c b/drivers/net/ti/icssg-prueth.c
index 19511638c9..5d5b932f63 100644
--- a/drivers/net/ti/icssg-prueth.c
+++ b/drivers/net/ti/icssg-prueth.c
@@ -71,6 +71,35 @@ enum prueth_port {
 /* CTRLMMR_ICSSG_RGMII_CTRL register bits */
 #define ICSSG_CTRL_RGMII_ID_MODE		BIT(24)
 
+/* pstate speed/duplex command to set speed and duplex settings
+ * in firmware.
+ * Command format : 0x8102ssPN. ss - sequence number: currently not
+ * used by driver, P - port number: For switch, N - Speed/Duplex state
+ *
+ * Possible values of N:
+ * 0x0 - 10Mbps/Half duplex ;
+ * 0x8 - 10Mbps/Full duplex ;
+ * 0x2 - 100Mbps/Half duplex;
+ * 0xa - 100Mbps/Full duplex;
+ * 0xc - 1Gbps/Full duplex;
+ * NOTE: The above are same as bits [3..1](slice 0) or bits [8..6](slice 1) of
+ * RGMII CFG register. So suggested to read the register to populate the command
+ * bits.
+ */
+#define ICSSG_PSTATE_SPEED_DUPLEX_CMD	0x81020000
+#define ICSSG_PSTATE_FULL_DUPLEX	BIT(3)
+#define ICSSG_PSTATE_SPEED_100		BIT(1)
+#define ICSSG_PSTATE_SPEED_1000		BIT(2)
+
+/* Management packet type */
+#define PRUETH_PKT_TYPE_CMD		0x10
+
+/* Flow IDs used in config structure to firmware. Should match with
+ * flow_id in struct dma for rx channels.
+ */
+#define ICSSG_RX_CHAN_FLOW_ID		0 /* flow id for host port */
+#define ICSSG_RX_MGM_CHAN_FLOW_ID	1 /* flow id for command response */
+
 /**
  * enum pruss_pru_id - PRU core identifiers
  */
@@ -101,6 +130,7 @@ struct prueth {
 	struct			clk mdiofck;
 	struct dma		dma_tx;
 	struct dma		dma_rx;
+	struct dma		dma_rx_mgm;
 	u32			rx_next;
 	u32			rx_pend;
 	int			slice;
@@ -144,6 +174,10 @@ struct prueth {
 #define PRUSS_MII_RT_RX_ERR0		0x50
 #define PRUSS_MII_RT_RX_ERR1		0x54
 
+/* Management frames are sent/received one at a time */
+#define MGMT_PKT_SIZE			128
+static uchar mgm_pkt_rx[MGMT_PKT_SIZE];
+
 static inline void icssg_update_rgmii_cfg(struct regmap *miig_rt, bool gig_en,
 					  bool full_duplex, int mii)
 {
@@ -248,6 +282,79 @@ static void icssg_config_set(struct prueth *prueth)
 	memcpy_toio(va, &prueth->config[0], sizeof(prueth->config[0]));
 }
 
+static int icssg_execute_firmware_command(struct prueth *priv, u32 cmd)
+{
+	struct ti_udma_drv_packet_data packet_data = { 0 };
+	int i = 10, ret = 0;
+	uchar *rx_pkt;
+	u32 rsp;
+
+	ret = dma_prepare_rcv_buf(&priv->dma_rx_mgm,
+				  &mgm_pkt_rx, MGMT_PKT_SIZE);
+	if (ret)
+		dev_err(priv->dev, "Mgm RX dma add buf failed %d\n", ret);
+
+	packet_data.pkt_type = PRUETH_PKT_TYPE_CMD;
+	ret = dma_send(&priv->dma_tx, &cmd, sizeof(cmd), &packet_data);
+	if (ret < 0) {
+		dev_err(priv->dev, "Error sending command to firmware %d\n",
+			ret);
+		return ret;
+	}
+
+	while (i--) {
+		ret =  dma_receive(&priv->dma_rx_mgm, (void **)&rx_pkt, NULL);
+		if (ret < 0 || ret > 0)
+			break;
+		/* wait for 10 * 10 = 100 msec. */
+		mdelay(10);
+	}
+	if (ret <= 0) {
+		/* Either error or no response from firmware */
+		dev_err(priv->dev, "Error or no response from firmware %d\n",
+			ret);
+		return -EINVAL;
+	}
+
+	rsp = le32_to_cpu(*(u32 *)rx_pkt);
+	if ((rsp & 0xffff0000) == (cmd & 0xffff0000))
+		return 0;
+
+	dev_err(priv->dev, "Invalid response from firmware %x\n", rsp);
+	return -EINVAL;
+}
+
+static void icssg_change_port_speed_duplex(struct prueth *priv,
+					   bool full_duplex, int speed)
+{
+	u32 cmd = ICSSG_PSTATE_SPEED_DUPLEX_CMD;
+
+	/* Set bit 3 of cmd for full duplex */
+	if (full_duplex)
+		cmd |= ICSSG_PSTATE_FULL_DUPLEX;
+
+	/* Set bit 1 & 2 of cmd based on speed */
+	switch (speed) {
+	case SPEED_10:
+		/* default value in CMD is already for 10M - bit 1
+		 * & 2 reset to 0,
+		 */
+		break;
+	case SPEED_100:
+		cmd |= ICSSG_PSTATE_SPEED_100;
+		break;
+	case SPEED_1000:
+		cmd |= ICSSG_PSTATE_SPEED_1000;
+		break;
+	default:
+		/* nothing to do */
+		return;
+	}
+
+	if (icssg_execute_firmware_command(priv, cmd))
+		dev_err(priv->dev, "Error sending port speed/duplex cmd\n");
+}
+
 static int icssg_update_link(struct prueth *priv)
 {
 	struct phy_device *phy = priv->phydev;
@@ -264,6 +371,9 @@ static int icssg_update_link(struct prueth *priv)
 		/* update the Tx IPG based on 100M/1G speed */
 		icssg_update_mii_rt_cfg(priv->mii_rt, phy->speed, priv->slice);
 
+		/* send command to firmware to update speed/duplex setting */
+		icssg_change_port_speed_duplex(priv, full_duplex, phy->speed);
+
 		printf("link up on port %d, speed %d, %s duplex\n",
 		       priv->port_id, phy->speed,
 		       (phy->duplex == DUPLEX_FULL) ? "full" : "half");
@@ -276,6 +386,7 @@ static int icssg_update_link(struct prueth *priv)
 
 static int prueth_start(struct udevice *dev)
 {
+	struct ti_udma_drv_chan_cfg_data *dma_rx_cfg_data;
 	struct prueth *priv = dev_get_priv(dev);
 	struct eth_pdata *pdata = dev->platdata;
 	int ret, i;
@@ -297,6 +408,17 @@ static int prueth_start(struct udevice *dev)
 	if (ret)
 		dev_err(dev, "RX dma get failed %d\n", ret);
 
+	/* check if the rx_flow_id of dma_rx is as expected since
+	 * driver hardcode that value in config struct to firmware
+	 * in probe. Just add this sanity check to catch any change
+	 * to rx channel assignment in the future.
+	 */
+	dma_get_cfg(&priv->dma_rx, 0, (void **)&dma_rx_cfg_data);
+	if (dma_rx_cfg_data->flow_id_base != ICSSG_RX_CHAN_FLOW_ID)
+		dev_err(dev,
+			"RX dma flow id bad, expected %d, actual %ld\n",
+			ICSSG_RX_CHAN_FLOW_ID, priv->dma_rx.id);
+
 	for (i = 0; i < UDMA_RX_DESC_NUM; i++) {
 		ret = dma_prepare_rcv_buf(&priv->dma_rx,
 					  net_rx_packets[i],
@@ -305,6 +427,16 @@ static int prueth_start(struct udevice *dev)
 			dev_err(dev, "RX dma add buf failed %d\n", ret);
 	}
 
+	snprintf(chn_name, sizeof(chn_name), "rxmgm%d", priv->slice);
+	ret = dma_get_by_name(dev, chn_name, &priv->dma_rx_mgm);
+	if (ret)
+		dev_err(dev, "RX dma get failed %d\n", ret);
+
+	dma_get_cfg(&priv->dma_rx_mgm, 0, (void **)&dma_rx_cfg_data);
+	if (dma_rx_cfg_data->flow_id_base != ICSSG_RX_MGM_CHAN_FLOW_ID)
+		dev_err(dev, "RX mgm dma flow id bad, expected %d, actual %ld\n",
+			ICSSG_RX_MGM_CHAN_FLOW_ID, priv->dma_rx_mgm.id);
+
 	ret = dma_enable(&priv->dma_tx);
 	if (ret) {
 		dev_err(dev, "TX dma_enable failed %d\n", ret);
@@ -317,6 +449,12 @@ static int prueth_start(struct udevice *dev)
 		goto rx_fail;
 	}
 
+	ret = dma_enable(&priv->dma_rx_mgm);
+	if (ret) {
+		dev_err(dev, "Mgm RX dma_enable failed %d\n", ret);
+		goto mgm_rx_fail;
+	}
+
 	ret = phy_startup(priv->phydev);
 	if (ret) {
 		dev_err(dev, "phy_startup failed\n");
@@ -334,6 +472,9 @@ static int prueth_start(struct udevice *dev)
 phy_shut:
 	phy_shutdown(priv->phydev);
 phy_fail:
+	dma_disable(&priv->dma_rx_mgm);
+	dma_free(&priv->dma_rx_mgm);
+mgm_rx_fail:
 	dma_disable(&priv->dma_rx);
 	dma_free(&priv->dma_rx);
 rx_fail:
@@ -406,6 +547,9 @@ static void prueth_stop(struct udevice *dev)
 	dma_disable(&priv->dma_rx);
 	dma_free(&priv->dma_rx);
 
+	dma_disable(&priv->dma_rx_mgm);
+	dma_free(&priv->dma_rx_mgm);
+
 	/* Workaround for shutdown command */
 	writel(0x0, priv->tmaddr + priv->slice * 0x200);
 }
@@ -620,7 +764,8 @@ static int prueth_probe(struct udevice *dev)
 	config->addr_lo = cpu_to_le32(lower_32_bits(prueth->sram_pa));
 	config->addr_hi = cpu_to_le32(upper_32_bits(prueth->sram_pa));
 	config->num_tx_threads = 0;
-	config->rx_flow_id = 0; /* flow id for host port */
+	config->rx_flow_id = ICSSG_RX_CHAN_FLOW_ID;
+	config->rx_mgr_flow_id = ICSSG_RX_MGM_CHAN_FLOW_ID;
 
 	for (i = 8; i < 16; i++)
 		config->tx_buf_sz[i] = cpu_to_le32(0x1800);
-- 
2.17.1

