From b10414684b81c4750614d240d1b0d86b9fbc6cab Mon Sep 17 00:00:00 2001
From: "le.jin" <le.jin@siemens.com>
Date: Mon, 18 Nov 2019 09:58:29 +0800
Subject: [PATCH 03/18] iot2050:turn on red led when something goes wrong

Signed-off-by: le.jin <le.jin@siemens.com>
---
 arch/arm/dts/iot2050-common.dtsi              | 23 ++++++
 arch/arm/dts/iot2050-r5-common.dtsi           | 12 ---
 arch/arm/dts/iot2050-u-boot.dtsi              | 11 +++
 common/main.c                                 | 22 ++++-
 configs/am65x_iot2050_advanced_a53_defconfig  |  3 +
 .../am65x_iot2050_advanced_gp_a53_defconfig   |  3 +
 configs/am65x_iot2050_basic_a53_defconfig     |  3 +
 lib/hang.c                                    | 80 +++++++++++++++++++
 8 files changed, 144 insertions(+), 13 deletions(-)

diff --git a/arch/arm/dts/iot2050-common.dtsi b/arch/arm/dts/iot2050-common.dtsi
index 2391a12c88..9769818d69 100644
--- a/arch/arm/dts/iot2050-common.dtsi
+++ b/arch/arm/dts/iot2050-common.dtsi
@@ -13,6 +13,22 @@
 		remoteproc0 = &mcu_r5fss0_core0;
 		remoteproc1 = &mcu_r5fss0_core1;
 	};
+
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-names = "default";
+		pinctrl-0 = <&led_pins_default>;
+
+		status-led-red {
+			gpios = <&wkup_gpio0 32 GPIO_ACTIVE_HIGH>;
+			label = "redled";
+		};
+
+		status-led-green {
+			gpios = <&wkup_gpio0 24 GPIO_ACTIVE_HIGH>;
+			label = "greenled";
+		};
+	};
 };
 
 &wkup_pmx0 {
@@ -38,6 +54,13 @@
 			AM65X_WKUP_IOPAD(0x00ec, PIN_INPUT, 0) /* (AD7) MCU_I2C0_SDA */
 		>;
 	};
+	led_pins_default:led_pins_default{
+		pinctrl-single,pins = <
+			AM65X_WKUP_IOPAD(0x0050, PIN_OUTPUT, 7) /* (N2) WKUP_GPIO0_32 STATUS RED   LED */
+			AM65X_WKUP_IOPAD(0x0028, PIN_OUTPUT, 7) /* (R3) WKUP_GPIO0_22 USER   GREEN LED */
+			AM65X_WKUP_IOPAD(0x0030, PIN_OUTPUT, 7) /* (R5) WKUP_GPIO0_24 STATUS GREEN LED */
+		>;
+	};
 };
 
 &main_pmx0 {
diff --git a/arch/arm/dts/iot2050-r5-common.dtsi b/arch/arm/dts/iot2050-r5-common.dtsi
index cf3a1f2ed4..32cd62ec05 100644
--- a/arch/arm/dts/iot2050-r5-common.dtsi
+++ b/arch/arm/dts/iot2050-r5-common.dtsi
@@ -90,18 +90,6 @@
 		u-boot,dm-spl;
 	};
 
-	wkup_gpio0: wkup_gpio0@42110000 {
-		compatible = "ti,k2g-gpio", "ti,keystone-gpio";
-		reg = <0x42110000 0x100>;
-		gpio-controller;
-		#gpio-cells = <2>;
-		ti,ngpio = <56>;
-		ti,davinci-gpio-unbanked = <0>;
-		clocks = <&k3_clks 59 0>;
-		clock-names = "gpio";
-		u-boot,dm-spl;
-	};
-
 	clk_200mhz: dummy_clock {
 		compatible = "fixed-clock";
 		#clock-cells = <0>;
diff --git a/arch/arm/dts/iot2050-u-boot.dtsi b/arch/arm/dts/iot2050-u-boot.dtsi
index b12c772b84..025fdd1578 100644
--- a/arch/arm/dts/iot2050-u-boot.dtsi
+++ b/arch/arm/dts/iot2050-u-boot.dtsi
@@ -152,6 +152,17 @@
 
 &cbass_wakeup {
 	u-boot,dm-spl;
+	wkup_gpio0: wkup_gpio0@42110000 {
+		compatible = "ti,k2g-gpio", "ti,keystone-gpio";
+		reg = <0x42110000 0x100>;
+		gpio-controller;
+		#gpio-cells = <2>;
+		ti,ngpio = <56>;
+		ti,davinci-gpio-unbanked = <0>;
+		clocks = <&k3_clks 59 0>;
+		clock-names = "gpio";
+		u-boot,dm-spl;
+	};
 };
 
 &secure_proxy_main {
diff --git a/common/main.c b/common/main.c
index 07b34bf2b0..d926894f61 100644
--- a/common/main.c
+++ b/common/main.c
@@ -11,7 +11,9 @@
 #include <cli.h>
 #include <console.h>
 #include <version.h>
-
+#include <asm/io.h>
+#include <dm/uclass.h>
+#include <led.h>
 /*
  * Board-specific Platform code can reimplement show_boot_progress () if needed
  */
@@ -37,6 +39,19 @@ static void run_preboot_environment_command(void)
 #endif /* CONFIG_PREBOOT */
 }
 
+#if defined(CONFIG_TARGET_IOT2050_ADVANCED_A53) || defined(CONFIG_TARGET_IOT2050_BASIC_A53)
+static void iot2050_show_set_light(const char *label,enum led_state_t state)
+{
+	struct udevice *led_dev;
+	int error_status;
+	error_status = led_get_by_label(label,&led_dev);
+	if(!error_status)
+	{
+		led_set_state(led_dev, state);
+	}
+}
+#endif
+
 /* We come here after U-Boot is initialised and ready to process commands */
 void main_loop(void)
 {
@@ -60,6 +75,11 @@ void main_loop(void)
 
 	autoboot_command(s);
 
+#if defined(CONFIG_TARGET_IOT2050_ADVANCED_A53) || defined(CONFIG_TARGET_IOT2050_BASIC_A53)
+	/* Turn on the LED when OS is not started  */
+	iot2050_show_set_light("redled",LEDST_ON);
+	iot2050_show_set_light("greenled",LEDST_OFF);
+#endif
 	cli_loop();
 	panic("No CLI available");
 }
diff --git a/configs/am65x_iot2050_advanced_a53_defconfig b/configs/am65x_iot2050_advanced_a53_defconfig
index 177cbdd457..a2f1f37b99 100644
--- a/configs/am65x_iot2050_advanced_a53_defconfig
+++ b/configs/am65x_iot2050_advanced_a53_defconfig
@@ -84,6 +84,7 @@ CONFIG_FASTBOOT_FLASH_MMC_DEV=0
 CONFIG_FASTBOOT_CMD_OEM_FORMAT=y
 CONFIG_TI_SCI_PROTOCOL=y
 CONFIG_DM_GPIO=y
+CONFIG_DA8XX_GPIO=y
 CONFIG_DM_PCA953X=y
 CONFIG_DM_I2C=y
 CONFIG_I2C_SET_DEFAULT_BUS_NUM=y
@@ -157,3 +158,5 @@ CONFIG_SPL_FIT_IMAGE_POST_PROCESS=y
 CONFIG_FIT_IMAGE_POST_PROCESS=y
 CONFIG_BLOCK_CACHE=y
 CONFIG_SPL_BLOCK_CACHE=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
diff --git a/configs/am65x_iot2050_advanced_gp_a53_defconfig b/configs/am65x_iot2050_advanced_gp_a53_defconfig
index b26e2cd8e5..5a0a1f67cb 100644
--- a/configs/am65x_iot2050_advanced_gp_a53_defconfig
+++ b/configs/am65x_iot2050_advanced_gp_a53_defconfig
@@ -84,6 +84,7 @@ CONFIG_FASTBOOT_FLASH_MMC_DEV=0
 CONFIG_FASTBOOT_CMD_OEM_FORMAT=y
 CONFIG_TI_SCI_PROTOCOL=y
 CONFIG_DM_GPIO=y
+CONFIG_DA8XX_GPIO=y
 CONFIG_DM_PCA953X=y
 CONFIG_DM_I2C=y
 CONFIG_I2C_SET_DEFAULT_BUS_NUM=y
@@ -129,6 +130,8 @@ CONFIG_REMOTEPROC_TI_K3_R5F=y
 CONFIG_REMOTEPROC_TI_PRU=y
 CONFIG_BLOCK_CACHE=y
 CONFIG_SPL_BLOCK_CACHE=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
 CONFIG_DM_RESET=y
 CONFIG_RESET_TI_SCI=y
 CONFIG_DM_SERIAL=y
diff --git a/configs/am65x_iot2050_basic_a53_defconfig b/configs/am65x_iot2050_basic_a53_defconfig
index c6657eb03c..124cc496fd 100644
--- a/configs/am65x_iot2050_basic_a53_defconfig
+++ b/configs/am65x_iot2050_basic_a53_defconfig
@@ -84,6 +84,7 @@ CONFIG_FASTBOOT_FLASH_MMC_DEV=0
 CONFIG_FASTBOOT_CMD_OEM_FORMAT=y
 CONFIG_TI_SCI_PROTOCOL=y
 CONFIG_DM_GPIO=y
+CONFIG_DA8XX_GPIO=y
 CONFIG_DM_PCA953X=y
 CONFIG_DM_I2C=y
 CONFIG_I2C_SET_DEFAULT_BUS_NUM=y
@@ -129,6 +130,8 @@ CONFIG_REMOTEPROC_TI_K3_R5F=y
 CONFIG_REMOTEPROC_TI_PRU=y
 CONFIG_BLOCK_CACHE=y
 CONFIG_SPL_BLOCK_CACHE=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
 CONFIG_DM_RESET=y
 CONFIG_RESET_TI_SCI=y
 CONFIG_DM_SERIAL=y
diff --git a/lib/hang.c b/lib/hang.c
index c5a78694be..a612136138 100644
--- a/lib/hang.c
+++ b/lib/hang.c
@@ -9,7 +9,85 @@
 
 #include <common.h>
 #include <bootstage.h>
+#include <asm/gpio.h>
+#include <asm/io.h>
+#include <led.h>
+#include <asm/io.h>
 
+#define  WKUP_GPIO_32						0		/* WKUP_GPIO0 bank 2: Status Red  */
+#define  WKUP_GPIO_24						24		/* WKUP_GPIO0 bank 1: Status Green*/
+
+#define  WKUP_GPIO0_BASE					0x42110000
+#define  GPIO_DIRECTION01_OFFSET				0x0010
+#define  GPIO_SETDATA01_OFFSET					0x0018
+#define  GPIO_DIRECTION23_OFFSET				0x0038
+#define  GPIO_SETDATA23_OFFSET					0x0040
+#define  WKUP_CTRL_MMR0_CFG0					0x43000000
+#define  CTRLMMR_WKUP_GPIO32_PADCONFIG20_OFFSET			0x1C050		/* WKUP_GPIO_32  */
+#define  CTRLMMR_WKUP_GPIO24_PADCONFIG12_OFFSET			0x1C030		/* WKUP_GPIO_24  */
+
+#define  MUX_MODE_GENERAL_GPIO					0x07
+#define  TX_DIS_FIELD						21		/* tx disable filed */
+#define  RED							0
+#define  GREEN							1
+#define  TURN_ON						1
+#define  TURN_OFF						0
+
+/**
+ * set_iot2050_status_led: set iot2050 status led
+ *
+ * @colour: status red/green led  [ red: RED ; green: GREEN ]
+ * @state:  turn on/off the led   [ on: TURN_ON ; off: TURN_OFF ]
+ *
+ */
+
+static void set_iot2050_status_led(unsigned int colour,unsigned int state)
+{
+	u32 pad_config,dir_reg,data_reg;
+	void *dirreg, *outreg, *padconfig;
+	u32 WKUP_GPIO;
+
+	if (colour == GREEN) {
+		dirreg = (void*)(WKUP_GPIO0_BASE+GPIO_DIRECTION01_OFFSET);
+		outreg = (void*)(WKUP_GPIO0_BASE+GPIO_SETDATA01_OFFSET);
+		padconfig = (void*)(WKUP_CTRL_MMR0_CFG0+CTRLMMR_WKUP_GPIO24_PADCONFIG12_OFFSET);
+		WKUP_GPIO = WKUP_GPIO_24;
+
+	} else if (colour == RED) {
+		dirreg = (void*)(WKUP_GPIO0_BASE+GPIO_DIRECTION23_OFFSET);
+		outreg = (void*)(WKUP_GPIO0_BASE+GPIO_SETDATA23_OFFSET);
+		padconfig = (void*)(WKUP_CTRL_MMR0_CFG0+CTRLMMR_WKUP_GPIO32_PADCONFIG20_OFFSET);
+		WKUP_GPIO = WKUP_GPIO_32;
+	}
+
+	/* 	config pinmux */
+	pad_config = __raw_readl(padconfig);
+	pad_config |= MUX_MODE_GENERAL_GPIO;
+	pad_config &= ~(1 << TX_DIS_FIELD);
+	__raw_writel(pad_config, padconfig);
+
+	/* 	set direction out */
+	dir_reg = __raw_readl(dirreg);
+	dir_reg &= ~(1 << WKUP_GPIO);
+	__raw_writel(dir_reg, dirreg);
+
+	/* 	set the value high or low */
+	data_reg = __raw_readl(outreg);
+	if (state == TURN_ON)
+		data_reg |=  (1 << WKUP_GPIO);
+	else if (state == TURN_OFF)
+		data_reg &= ~(1 << WKUP_GPIO);
+
+	__raw_writel(data_reg, outreg);
+}
+
+
+
+static void set_iot2050_error_status_led_on(void)
+{
+	set_iot2050_status_led(GREEN,TURN_OFF);
+	set_iot2050_status_led(RED,TURN_ON);
+}
 /**
  * hang - stop processing by staying in an endless loop
  *
@@ -20,6 +98,8 @@
  */
 void hang(void)
 {
+	/*Turn on the red led for IOT2050 platform*/
+	set_iot2050_error_status_led_on();
 #if !defined(CONFIG_SPL_BUILD) || \
 		(CONFIG_IS_ENABLED(LIBCOMMON_SUPPORT) && \
 		 CONFIG_IS_ENABLED(SERIAL_SUPPORT))
-- 
2.17.1

