From 305e35edf10a84ee2632651688034ba55b3dcfe4 Mon Sep 17 00:00:00 2001
From: Gao Nian <nian.gao@siemens.com>
Date: Tue, 7 Jan 2020 13:50:42 +0800
Subject: [PATCH 11/18] feat: catch-up 100M full duplex in u-boot

Signed-off-by: Gao Nian <nian.gao@siemens.com>
---
 arch/arm/dts/iot2050-u-boot.dtsi |   1 +
 drivers/net/ti/icssg-prueth.c    | 349 ++++++++++++++++---------------
 2 files changed, 186 insertions(+), 164 deletions(-)

diff --git a/arch/arm/dts/iot2050-u-boot.dtsi b/arch/arm/dts/iot2050-u-boot.dtsi
index 025fdd1578..659efa0611 100644
--- a/arch/arm/dts/iot2050-u-boot.dtsi
+++ b/arch/arm/dts/iot2050-u-boot.dtsi
@@ -32,6 +32,7 @@
 		                "ti-pruss/am65x-pru1-prueth-fw.elf",
 		                "ti-pruss/am65x-rtu1-prueth-fw.elf";
 		mii-g-rt = <&icssg0_mii_g_rt>;
+		mii-rt = <&icssg0_mii_rt>;
 		dma-coherent;
 		dmas = <&mcu_udmap &icssg0 0 UDMA_DIR_TX>, /* egress slice 0 */
 		       <&mcu_udmap &icssg0 1 UDMA_DIR_TX>, /* egress slice 0 */
diff --git a/drivers/net/ti/icssg-prueth.c b/drivers/net/ti/icssg-prueth.c
index 8564389d5a..4090d22d03 100644
--- a/drivers/net/ti/icssg-prueth.c
+++ b/drivers/net/ti/icssg-prueth.c
@@ -33,8 +33,6 @@
 #define ICSS_SLICE0     0
 #define ICSS_SLICE1     1
 
-#define MSMC_RAM_SIZE	0x10000
-
 #ifdef PKTSIZE_ALIGN
 #define UDMA_RX_BUF_SIZE PKTSIZE_ALIGN
 #else
@@ -59,11 +57,6 @@ enum prueth_port {
 	PRUETH_PORT_MII1,	/* physical port MII 1 */
 };
 
-/* Below used to support 2 icssgs per pru port */
-#define ICSSG0          0
-#define ICSSG1          1
-#define NUM_ICSSG       2
-
 /* Config region lies in shared RAM */
 #define ICSS_CONFIG_OFFSET_SLICE0	0
 #define ICSS_CONFIG_OFFSET_SLICE1	0x8000
@@ -88,19 +81,20 @@ enum pruss_pru_id {
 
 struct prueth {
 	struct udevice		*dev;
-	struct regmap		*miig_rt[NUM_ICSSG];
+	struct regmap		*miig_rt;
+	struct regmap		*mii_rt;
 	fdt_addr_t		mdio_base;
-	phys_addr_t		pruss_shrdram2[NUM_ICSSG];
-	phys_addr_t		tmaddr[NUM_ICSSG];
+	phys_addr_t		pruss_shrdram2;
+	phys_addr_t		tmaddr;
 	struct mii_dev		*bus;
 	u32			port_id;
-	u32			sram_pa[NUM_ICSSG];
+	u32			sram_pa;
 	struct phy_device	*phydev;
 	bool			has_phy;
 	ofnode			phy_node;
 	u32			phy_addr;
 	ofnode			eth_node[PRUETH_NUM_MACS];
-	struct icssg_config	config[NUM_ICSSG][PRUSS_NUM_PRUS];
+	struct icssg_config	config[PRUSS_NUM_PRUS];
 	u32			mdio_freq;
 	int			phy_interface;
 	struct			clk mdiofck;
@@ -108,14 +102,88 @@ struct prueth {
 	struct dma		dma_rx;
 	u32			rx_next;
 	u32			rx_pend;
-	int			slice[NUM_ICSSG];
-	int			ingress_icssg;
-	int			ingress_slice;
-	int			egress_icssg;
-	int			egress_slice;
-	bool			dual_icssg;
+	int			slice;
 };
 
+/**
+ * TX IPG Values to be set for 100M and 1G link speeds.  These values are
+ * in ocp_clk cycles. So need change if ocp_clk is changed for a specific
+ * h/w design.
+ */
+#define MII_RT_TX_IPG_100M	0x166
+#define MII_RT_TX_IPG_1G	0x18
+
+#define RGMII_CFG_OFFSET	4
+
+/* Constant to choose between MII0 and MII1 */
+#define ICSS_MII0	0
+#define ICSS_MII1	1
+
+/* RGMII CFG Register bits */
+#define RGMII_CFG_GIG_EN_MII0	BIT(17)
+#define RGMII_CFG_GIG_EN_MII1	BIT(21)
+#define RGMII_CFG_FULL_DUPLEX_MII0	BIT(18)
+#define RGMII_CFG_FULL_DUPLEX_MII1	BIT(22)
+
+/* PRUSS_MII_RT Registers */
+#define PRUSS_MII_RT_RXCFG0		0x0
+#define PRUSS_MII_RT_RXCFG1		0x4
+#define PRUSS_MII_RT_TXCFG0		0x10
+#define PRUSS_MII_RT_TXCFG1		0x14
+#define PRUSS_MII_RT_TX_CRC0		0x20
+#define PRUSS_MII_RT_TX_CRC1		0x24
+#define PRUSS_MII_RT_TX_IPG0		0x30
+#define PRUSS_MII_RT_TX_IPG1		0x34
+#define PRUSS_MII_RT_PRS0		0x38
+#define PRUSS_MII_RT_PRS1		0x3c
+#define PRUSS_MII_RT_RX_FRMS0		0x40
+#define PRUSS_MII_RT_RX_FRMS1		0x44
+#define PRUSS_MII_RT_RX_PCNT0		0x48
+#define PRUSS_MII_RT_RX_PCNT1		0x4c
+#define PRUSS_MII_RT_RX_ERR0		0x50
+#define PRUSS_MII_RT_RX_ERR1		0x54
+
+static inline void icssg_update_rgmii_cfg(struct regmap *miig_rt, bool gig_en,
+					  bool full_duplex, int mii)
+{
+	u32 gig_en_mask, gig_val = 0, full_duplex_mask, full_duplex_val = 0;
+
+	gig_en_mask = (mii == ICSS_MII0) ? RGMII_CFG_GIG_EN_MII0 :
+					RGMII_CFG_GIG_EN_MII1;
+	if (gig_en)
+		gig_val = gig_en_mask;
+	regmap_update_bits(miig_rt, RGMII_CFG_OFFSET, gig_en_mask, gig_val);
+
+	full_duplex_mask = (mii == ICSS_MII0) ? RGMII_CFG_FULL_DUPLEX_MII0 :
+					   RGMII_CFG_FULL_DUPLEX_MII1;
+	if (full_duplex)
+		full_duplex_val = full_duplex_mask;
+	regmap_update_bits(miig_rt, RGMII_CFG_OFFSET, full_duplex_mask,
+			   full_duplex_val);
+}
+
+static inline void icssg_update_mii_rt_cfg(struct regmap *mii_rt, int speed,
+					   int mii)
+{
+	u32 ipg_reg, val;
+
+	ipg_reg = (mii == ICSS_MII0) ? PRUSS_MII_RT_TX_IPG0 :
+				       PRUSS_MII_RT_TX_IPG1;
+	switch (speed) {
+	case SPEED_1000:
+		val = MII_RT_TX_IPG_1G;
+		break;
+	case SPEED_100:
+		val = MII_RT_TX_IPG_100M;
+		break;
+	default:
+		/* Other links speeds not supported */
+		pr_err("Unsupported link speed\n");
+		return;
+	}
+	regmap_write(mii_rt, ipg_reg, val);
+}
+
 static int icssg_phy_init(struct udevice *dev)
 {
 	struct prueth *priv = dev_get_priv(dev);
@@ -149,7 +217,7 @@ static int icssg_phy_init(struct udevice *dev)
 	return ret;
 }
 
-static int icssg_mdio_init(struct udevice *dev, int icssg)
+static int icssg_mdio_init(struct udevice *dev)
 {
 	struct prueth *prueth = dev_get_priv(dev);
 
@@ -162,28 +230,42 @@ static int icssg_mdio_init(struct udevice *dev, int icssg)
 	return 0;
 }
 
-static void icssg_config_set(struct prueth *prueth, int icssg, int slice)
+static void icssg_config_set(struct prueth *prueth)
 {
-	struct icssg_config *config;
 	void __iomem *va;
-	int i;
 
-	config = &prueth->config[icssg][0];
-	memset(config, 0, sizeof(*config));
-	config->addr_lo = cpu_to_le32(lower_32_bits(prueth->sram_pa[icssg]));
-	config->addr_hi = cpu_to_le32(upper_32_bits(prueth->sram_pa[icssg]));
-	config->num_tx_threads = 0;
-	config->rx_flow_id = 0; /* flow id for host port */
-
-	for (i = 8; i < 16; i++)
-		config->tx_buf_sz[i] = cpu_to_le32(0x1800);
+	va = (void __iomem *)prueth->pruss_shrdram2 + prueth->slice *
+			ICSSG_CONFIG_OFFSET_SLICE1;
 
+	memcpy_toio(va, &prueth->config[0], sizeof(prueth->config[0]));
+}
 
-	va = (void __iomem *)prueth->pruss_shrdram2[icssg] +
-		slice * ICSSG_CONFIG_OFFSET_SLICE1;
+static int icssg_update_link(struct prueth *priv)
+{
+	struct phy_device *phy = priv->phydev;
+	bool gig_en = false, full_duplex = false;
+
+	if (phy->link) { /* link up */
+		if (phy->speed == 1000)
+			gig_en = true;
+		if (phy->duplex == 0x1)
+			full_duplex = true;
+		if (phy->speed == 100)
+			gig_en = false;
+		/* Set the RGMII cfg for gig en and full duplex */
+		icssg_update_rgmii_cfg(priv->miig_rt, gig_en, full_duplex,
+				       priv->slice);
+		/* update the Tx IPG based on 100M/1G speed */
+		icssg_update_mii_rt_cfg(priv->mii_rt, phy->speed, priv->slice);
+
+		printf("link up on port %d, speed %d, %s duplex\n",
+		       priv->port_id, phy->speed,
+		       (phy->duplex == DUPLEX_FULL) ? "full" : "half");
+	} else {
+		printf("link down on port %d\n", priv->port_id);
+	}
 
-	memcpy_toio(va, &prueth->config[icssg][0],
-		    sizeof(prueth->config[icssg][0]));
+	return phy->link;
 }
 
 static int prueth_start(struct udevice *dev)
@@ -194,26 +276,14 @@ static int prueth_start(struct udevice *dev)
 	char tx_chn_name[16];
 	char rx_chn_name[16];
 
-	icssg_class_set_mac_addr(priv->miig_rt[priv->ingress_icssg],
-				 priv->ingress_slice,
+	icssg_class_set_mac_addr(priv->miig_rt, priv->slice,
 				 (u8 *)pdata->enetaddr);
-	icssg_class_default(priv->miig_rt[priv->ingress_icssg],
-			    priv->ingress_slice);
+	icssg_class_default(priv->miig_rt, priv->slice);
+
+	/* To differentiate channels for SLICE0 vs SLICE1 */
+	snprintf(tx_chn_name, sizeof(tx_chn_name), "tx%d-0", priv->slice);
+	snprintf(rx_chn_name, sizeof(rx_chn_name), "rx%d", priv->slice);
 
-	/* To differentiate channels for SLICE0 vs SLICE1 for single icssg
-	 * and ICSSG0 vs ICSSG1 for dual icssg
-	 */
-	if (!priv->dual_icssg) {
-		snprintf(tx_chn_name, sizeof(tx_chn_name), "tx%d-0",
-			 priv->egress_slice);
-		snprintf(rx_chn_name, sizeof(rx_chn_name), "rx%d",
-			 priv->ingress_slice);
-	} else {
-		snprintf(tx_chn_name, sizeof(tx_chn_name), "tx%d-0",
-			 priv->egress_icssg);
-		snprintf(rx_chn_name, sizeof(rx_chn_name), "rx%d",
-			 priv->ingress_icssg);
-	}
 	ret = dma_get_by_name(dev, tx_chn_name, &priv->dma_tx);
 	if (ret)
 		dev_err(dev, "TX dma get failed %d\n", ret);
@@ -248,7 +318,16 @@ static int prueth_start(struct udevice *dev)
 		goto phy_fail;
 	}
 
+	ret = icssg_update_link(priv);
+	if (!ret) {
+		ret = -ENODEV;
+		goto phy_shut;
+	}
+
 	return 0;
+
+phy_shut:
+	phy_shutdown(priv->phydev);
 phy_fail:
 	dma_disable(&priv->dma_rx);
 rx_fail:
@@ -306,9 +385,8 @@ static int prueth_free_pkt(struct udevice *dev, uchar *packet, int length)
 static void prueth_stop(struct udevice *dev)
 {
 	struct prueth *priv = dev_get_priv(dev);
-	int icssg = priv->ingress_icssg, slice = priv->ingress_slice;
 
-	icssg_class_disable(priv->miig_rt[icssg], slice);
+	icssg_class_disable(priv->miig_rt, priv->slice);
 
 	phy_shutdown(priv->phydev);
 
@@ -319,13 +397,7 @@ static void prueth_stop(struct udevice *dev)
 	dma_free(&priv->dma_rx);
 
 	/* Workaround for shutdown command */
-	writel(0x0, priv->tmaddr[icssg] + slice * 0x200);
-	if (!priv->dual_icssg)
-		return;
-
-	icssg = priv->egress_icssg;
-	slice = priv->egress_slice;
-	writel(0x0, priv->tmaddr[icssg] + slice * 0x200);
+	writel(0x0, priv->tmaddr + priv->slice * 0x200);
 }
 
 static const struct eth_ops prueth_ops = {
@@ -402,82 +474,43 @@ static int prueth_config_rgmiidelay(struct prueth *prueth,
 	return 0;
 }
 
-static int get_pruss_info(struct prueth *prueth,
-			  ofnode node, ofnode *pruss_node, int icssg)
-{
-	struct udevice **prussdev = NULL;
-	int err;
-
-	*pruss_node = ofnode_get_parent(node);
-	err = misc_init_by_ofnode(*pruss_node);
-	if (err)
-		return err;
-
-	err = device_find_global_by_ofnode(*pruss_node, prussdev);
-	if (err)
-		dev_err(dev, "error getting the pruss dev\n");
-
-	err = pruss_request_shrmem_region(*prussdev,
-					  &prueth->pruss_shrdram2[icssg]);
-	if (err)
-		return err;
-
-	if (icssg)
-		prueth->miig_rt[icssg] =
-			syscon_regmap_lookup_by_phandle(prueth->dev,
-							"mii-g-rt-paired");
-	else
-		prueth->miig_rt[icssg] =
-			syscon_regmap_lookup_by_phandle(prueth->dev,
-							"mii-g-rt");
-	if (!prueth->miig_rt[icssg]) {
-		dev_err(dev, "No mii-g-rt syscon regmap for icssg %d\n", icssg);
-		return -ENODEV;
-	}
-
-	return pruss_request_tm_region(*prussdev, &prueth->tmaddr[icssg]);
-}
-
 static int prueth_probe(struct udevice *dev)
 {
-	ofnode eth0_node, eth1_node, node, pruss_node, mdio_node, sram_node,
-	dev_node;
 	struct prueth *prueth;
-	u32 err, sp, tmp[8];
-	int ret = 0;
+	int ret = 0, i;
+	ofnode eth0_node, eth1_node, node, pruss_node, mdio_node, sram_node;
+	u32 phandle, err, sp;
+	struct udevice **prussdev = NULL;
+	struct icssg_config *config;
 
 	prueth = dev_get_priv(dev);
 	prueth->dev = dev;
-	dev_node = dev_ofnode(dev);
-
-	if (ofnode_device_is_compatible(dev_node, "ti,am654-dualicssg-prueth"))
-		prueth->dual_icssg = true;
-
-	if (prueth->dual_icssg)
-		err = ofnode_read_u32_array(dev_node, "prus", tmp, 8);
-	else
-		err = ofnode_read_u32_array(dev_node, "prus", tmp, 4);
+	err = ofnode_read_u32(dev_ofnode(dev), "prus", &phandle);
 	if (err)
 		return err;
 
-	node = ofnode_get_by_phandle(tmp[0]);
+	node = ofnode_get_by_phandle(phandle);
 	if (!ofnode_valid(node))
 		return -EINVAL;
 
-	ret = get_pruss_info(prueth, node, &pruss_node, ICSSG0);
+	pruss_node = ofnode_get_parent(node);
+	err = misc_init_by_ofnode(pruss_node);
+	if (err)
+		return err;
+
+	ret = device_find_global_by_ofnode(pruss_node, prussdev);
 	if (ret)
-		return ret;
+		dev_err(dev, "error getting the pruss dev\n");
 
-	if (prueth->dual_icssg) {
-		ofnode pruss_node_pair;
+	ret = pruss_request_shrmem_region(*prussdev, &prueth->pruss_shrdram2);
+	if (ret)
+		return ret;
 
-		node = ofnode_get_by_phandle(tmp[4]);
-		ret = get_pruss_info(prueth, node, &pruss_node_pair, ICSSG1);
-		if (ret)
-			return ret;
-	}
+	ret = pruss_request_tm_region(*prussdev, &prueth->tmaddr);
+	if (ret)
+		return ret;
 
-	node = dev_node;
+	node = dev_ofnode(dev);
 	eth0_node = ofnode_find_subnode(node, "ethernet-mii0");
 	eth1_node = ofnode_find_subnode(node, "ethernet-mii1");
 	/* one node must be present and available else we fail */
@@ -497,43 +530,29 @@ static int prueth_probe(struct udevice *dev)
 	}
 
 	if (ofnode_valid(eth0_node)) {
-		if (!prueth->dual_icssg) {
-			prueth->slice[ICSSG0] = 0;
-			prueth->egress_icssg = ICSSG0;
-			prueth->egress_slice = 0;
-			prueth->ingress_icssg = ICSSG0;
-			prueth->ingress_slice = 0;
-		} else {
-			prueth->slice[ICSSG0] = 0;
-			prueth->slice[ICSSG1] = 1;
-			prueth->egress_icssg = ICSSG1;
-			prueth->egress_slice = 1;
-			prueth->ingress_icssg = ICSSG0;
-			prueth->ingress_slice = 0;
-		}
+		prueth->slice = 0;
 		icssg_ofdata_parse_phy(dev, eth0_node);
 		prueth->eth_node[PRUETH_MAC0] = eth0_node;
 	}
 
 	if (ofnode_valid(eth1_node)) {
-		if (!prueth->dual_icssg) {
-			prueth->slice[ICSSG0] = 1;
-			prueth->egress_icssg = ICSSG0;
-			prueth->egress_slice = 0;
-			prueth->ingress_icssg = ICSSG0;
-			prueth->ingress_slice = 0;
-		} else {
-			prueth->slice[ICSSG0] = 1;
-			prueth->slice[ICSSG1] = 0;
-			prueth->egress_icssg = ICSSG0;
-			prueth->egress_slice = 1;
-			prueth->ingress_icssg = ICSSG1;
-			prueth->ingress_slice = 0;
-		}
+		prueth->slice = 1;
 		icssg_ofdata_parse_phy(dev, eth1_node);
 		prueth->eth_node[PRUETH_MAC0] = eth1_node;
 	}
 
+	prueth->miig_rt = syscon_regmap_lookup_by_phandle(dev, "mii-g-rt");
+	if (!prueth->miig_rt) {
+		dev_err(dev, "couldn't get mii-g-rt syscon regmap\n");
+		return -ENODEV;
+	}
+
+	prueth->mii_rt = syscon_regmap_lookup_by_phandle(dev, "mii-rt");
+	if (!prueth->mii_rt) {
+		dev_err(dev, "couldn't get mii-rt syscon regmap\n");
+		return -ENODEV;
+	}
+
 	ret = clk_get_by_name(dev, "mdio_fck", &prueth->mdiofck);
 	if (ret) {
 		dev_err(dev, "failed to get clock %d\n", ret);
@@ -545,7 +564,7 @@ static int prueth_probe(struct udevice *dev)
 		return ret;
 	}
 
-	ret = ofnode_read_u32(node, "sram", &sp);
+	ret = ofnode_read_u32(dev_ofnode(dev), "sram", &sp);
 	if (ret) {
 		dev_err(dev, "sram node fetch failed %d\n", ret);
 		return ret;
@@ -555,20 +574,15 @@ static int prueth_probe(struct udevice *dev)
 	if (!ofnode_valid(node))
 		return -EINVAL;
 
-	prueth->sram_pa[ICSSG0] = ofnode_get_addr(sram_node);
-	if (prueth->dual_icssg)
-		prueth->sram_pa[ICSSG1] =
-				prueth->sram_pa[ICSSG0] + MSMC_RAM_SIZE;
+	prueth->sram_pa = ofnode_get_addr(sram_node);
 
-	if (ofnode_valid(eth0_node)) {
+	if (!prueth->slice) {
 		ret = prueth_config_rgmiidelay(prueth, eth0_node);
 		if (ret) {
 			dev_err(dev, "prueth_config_rgmiidelay failed\n");
 			return ret;
 		}
-	}
-
-	if (ofnode_valid(eth1_node)) {
+	} else {
 		ret = prueth_config_rgmiidelay(prueth, eth1_node);
 		if (ret) {
 			dev_err(dev, "prueth_config_rgmiidelay failed\n");
@@ -580,7 +594,7 @@ static int prueth_probe(struct udevice *dev)
 	prueth->mdio_base = ofnode_get_addr(mdio_node);
 	ofnode_read_u32(mdio_node, "bus_freq", &prueth->mdio_freq);
 
-	ret = icssg_mdio_init(dev, ICSSG0);
+	ret = icssg_mdio_init(dev);
 	if (ret)
 		return ret;
 
@@ -591,9 +605,17 @@ static int prueth_probe(struct udevice *dev)
 	}
 
 	/* Set Load time configuration */
-	icssg_config_set(prueth, ICSSG0, prueth->slice[ICSSG0]);
-	if (prueth->dual_icssg)
-		icssg_config_set(prueth, ICSSG1, prueth->slice[ICSSG1]);
+	config = &prueth->config[0];
+	memset(config, 0, sizeof(*config));
+	config->addr_lo = cpu_to_le32(lower_32_bits(prueth->sram_pa));
+	config->addr_hi = cpu_to_le32(upper_32_bits(prueth->sram_pa));
+	config->num_tx_threads = 0;
+	config->rx_flow_id = 0; /* flow id for host port */
+
+	for (i = 8; i < 16; i++)
+		config->tx_buf_sz[i] = cpu_to_le32(0x1800);
+
+	icssg_config_set(prueth);
 
 	return 0;
 out:
@@ -605,7 +627,6 @@ out:
 
 static const struct udevice_id prueth_ids[] = {
 	{ .compatible = "ti,am654-icssg-prueth" },
-	{ .compatible = "ti,am654-dualicssg-prueth" },
 	{ }
 };
 
-- 
2.17.1

