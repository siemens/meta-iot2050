From 7bf4abc7ba7ee841d12189e8b3d5bde7a7501e29 Mon Sep 17 00:00:00 2001
From: Jan Kiszka <jan.kiszka@siemens.com>
Date: Sun, 17 May 2020 20:10:30 +0200
Subject: [PATCH 24/25] iot2050: Add ICSSG0 Ethernet support

Analogously to the am654-base-board, this adds support for the dual
Gigabit Ethernet on IOT2050. Here it is connected to ICSSG0. Either mii0
or mii1 can be enabled at a time. Select mii1 as it corresponds to X1
P1.

Turn on the required config switches and provide setup scripts for
loading the firmware images that are needed when booting from network.
Embed the firmware images into OSPI flash.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 arch/arm/dts/k3-am65-iot2050-boot-image.dtsi |  17 +++
 arch/arm/dts/k3-am65-iot2050-common.dtsi     | 128 +++++++++++++++++++
 board/siemens/iot2050/README                 |   4 +
 configs/iot2050_defconfig                    |   7 +-
 include/configs/iot2050.h                    |  10 +-
 5 files changed, 163 insertions(+), 3 deletions(-)

diff --git a/arch/arm/dts/k3-am65-iot2050-boot-image.dtsi b/arch/arm/dts/k3-am65-iot2050-boot-image.dtsi
index dad567d0dc..7fb9bb616f 100644
--- a/arch/arm/dts/k3-am65-iot2050-boot-image.dtsi
+++ b/arch/arm/dts/k3-am65-iot2050-boot-image.dtsi
@@ -101,5 +101,22 @@
 			offset = <0x740000>;
 			filename = "sysfw.itb_HS";
 		};
+
+		blob-ext@0x7c0000 {
+			offset = <0x7c0000>;
+			filename = "am65x-pru0-prueth-fw.elf";
+		};
+		blob-ext@0x7d0000 {
+			offset = <0x7d0000>;
+			filename = "am65x-pru1-prueth-fw.elf";
+		};
+		blob-ext@0x7e0000 {
+			offset = <0x7e0000>;
+			filename = "am65x-rtu0-prueth-fw.elf";
+		};
+		blob-ext@0x7f0000 {
+			offset = <0x7f0000>;
+			filename = "am65x-rtu1-prueth-fw.elf";
+		};
 	};
 };
diff --git a/arch/arm/dts/k3-am65-iot2050-common.dtsi b/arch/arm/dts/k3-am65-iot2050-common.dtsi
index fcb45d1525..3ed81bf8fc 100644
--- a/arch/arm/dts/k3-am65-iot2050-common.dtsi
+++ b/arch/arm/dts/k3-am65-iot2050-common.dtsi
@@ -10,12 +10,14 @@
 /dts-v1/;
 
 #include "k3-am654.dtsi"
+#include <dt-bindings/net/ti-dp83867.h>
 
 / {
 	aliases {
 		remoteproc0 = &mcu_r5fss0_core0;
 		remoteproc1 = &mcu_r5fss0_core1;
 		serial3 = &main_uart1;
+		ethernet0 = &pruss0_eth;
 	};
 
 	chosen {
@@ -80,6 +82,63 @@
 		#clock-cells = <0>;
 		clock-frequency = <19200000>;
 	};
+
+	/* Dual Ethernet application node on PRU-ICSSG0 */
+	pruss0_eth: pruss0_eth {
+		compatible = "ti,am654-icssg-prueth";
+		pinctrl-names = "default";
+		pinctrl-0 = <&icssg0_rgmii_pins_default>;
+		sram = <&icssg0_sram>;
+		clocks = <&k3_clks 62 3>;
+		clock-names = "mdio_fck";
+
+		prus = <&pru0_0>, <&rtu0_0>, <&pru0_1>, <&rtu0_1>;
+		firmware-name = "ti-pruss/am65x-pru0-prueth-fw.elf",
+		                "ti-pruss/am65x-rtu0-prueth-fw.elf",
+		                "ti-pruss/am65x-pru1-prueth-fw.elf",
+		                "ti-pruss/am65x-rtu1-prueth-fw.elf";
+		mii-g-rt = <&icssg0_mii_g_rt>;
+		mii-rt = <&icssg0_mii_rt>;
+		dma-coherent;
+		dmas = <&mcu_udmap 0xc100>, /* egress slice 0 */
+		       <&mcu_udmap 0xc101>, /* egress slice 0 */
+		       <&mcu_udmap 0xc102>, /* egress slice 0 */
+		       <&mcu_udmap 0xc103>, /* egress slice 0 */
+		       <&mcu_udmap 0xc104>, /* egress slice 1 */
+		       <&mcu_udmap 0xc105>, /* egress slice 1 */
+		       <&mcu_udmap 0xc106>, /* egress slice 1 */
+		       <&mcu_udmap 0xc107>, /* egress slice 1 */
+
+		       <&mcu_udmap 0x4100>, /* ingress slice 0 */
+		       <&mcu_udmap 0x4101>, /* ingress slice 1 */
+		       <&mcu_udmap 0x4102>, /* mgmnt rsp slice 0 */
+		       <&mcu_udmap 0x4103>; /* mgmnt rsp slice 1 */
+		dma-names = "tx0-0", "tx0-1", "tx0-2", "tx0-3",
+		            "tx1-0", "tx1-1", "tx1-2", "tx1-3",
+		            "rx0", "rx1",
+		            "rxmgm0", "rxmgm1";
+
+/*
+ * Commenting out the second mii interface as the framework
+ * supports one interface in a single probe
+ * So either mii0 or mii1 can be used. In case mii0 is needed
+ * uncomment mii0 and comment out mii1
+		pruss0_emac0: ethernet-mii0 {
+			phy-handle = <&pruss0_eth0_phy>;
+			phy-mode = "rgmii-rxid";
+			syscon-rgmii-delay = <&scm_conf 0x4100>;
+			local-mac-address = [00 00 00 00 00 00];
+		};
+*/
+
+		pruss0_emac1: ethernet-mii1 {
+			phy-handle = <&pruss0_eth1_phy>;
+			phy-mode = "rgmii-rxid";
+			syscon-rgmii-delay = <&scm_conf 0x4104>;
+			/* Filled in by bootloader */
+			local-mac-address = [00 00 00 00 00 00];
+		};
+	};
 };
 
 &cbass_main {
@@ -331,6 +390,45 @@
 			AM65X_IOPAD(0x0070, PIN_INPUT,  5)  /* (R25) I2C2_SDA */
 		>;
 	};
+
+	icssg0_rgmii_pins_default: icssg0_rgmii_pins_default {
+		pinctrl-single,pins = <
+			AM65X_IOPAD(0x0244, PIN_INPUT, 2) /* (AB28) PRG0_PRU1_GPO0.PRG0_RGMII2_RD0 */
+			AM65X_IOPAD(0x0248, PIN_INPUT, 2) /* (AC28) PRG0_PRU1_GPO1.PRG0_RGMII2_RD1 */
+			AM65X_IOPAD(0x024c, PIN_INPUT, 2) /* (AC27) PRG0_PRU1_GPO2.PRG0_RGMII2_RD2 */
+			AM65X_IOPAD(0x0250, PIN_INPUT, 2) /* (AB26) PRG0_PRU1_GPO3.PRG0_RGMII2_RD3 */
+			AM65X_IOPAD(0x0274, PIN_OUTPUT, 2) /* (AC25) PRG0_PRU1_GPO12.PRG0_RGMII2_TD0 */
+			AM65X_IOPAD(0x0278, PIN_OUTPUT, 2) /* (AD25) PRG0_PRU1_GPO13.PRG0_RGMII2_TD1 */
+			AM65X_IOPAD(0x027c, PIN_OUTPUT, 2) /* (AD24) PRG0_PRU1_GPO14.PRG0_RGMII2_TD2 */
+			AM65X_IOPAD(0x0280, PIN_OUTPUT, 2) /* (AE27) PRG0_PRU1_GPO15.PRG0_RGMII2_TD3 */
+			AM65X_IOPAD(0x0284, PIN_INPUT, 2) /* (AC24) PRG0_PRU1_GPO16.PRG0_RGMII2_TXC */
+			AM65X_IOPAD(0x0270, PIN_OUTPUT, 2) /* (AB24) PRG0_PRU1_GPO11.PRG0_RGMII2_TX_CTL */
+			AM65X_IOPAD(0x025c, PIN_INPUT, 2) /* (AB27) PRG0_PRU1_GPO6.PRG0_RGMII2_RXC */
+			AM65X_IOPAD(0x0254, PIN_INPUT, 2) /* (AA25) PRG0_PRU1_GPO4.PRG0_RGMII2_RX_CTL */
+			AM65X_IOPAD(0x01f4, PIN_INPUT, 2) /* (V24) PRG0_PRU0_GPO0.PRG0_RGMII1_RD0 */
+			AM65X_IOPAD(0x01f8, PIN_INPUT, 2) /* (W25) PRG0_PRU0_GPO1.PRG0_RGMII1_RD1 */
+			AM65X_IOPAD(0x01fc, PIN_INPUT, 2) /* (W24) PRG0_PRU0_GPO2.PRG0_RGMII1_RD2 */
+			AM65X_IOPAD(0x0200, PIN_INPUT, 2) /* (AA27) PRG0_PRU0_GPO3.PRG0_RGMII1_RD3 */
+			AM65X_IOPAD(0x0224, PIN_OUTPUT, 2) /* (AD27) PRG0_PRU0_GPO12.PRG0_RGMII1_TD0 */
+			AM65X_IOPAD(0x0228, PIN_OUTPUT, 2) /* (AC26) PRG0_PRU0_GPO13.PRG0_RGMII1_TD1 */
+			AM65X_IOPAD(0x022c, PIN_OUTPUT, 2) /* (AD26) PRG0_PRU0_GPO14.PRG0_RGMII1_TD2 */
+			AM65X_IOPAD(0x0230, PIN_OUTPUT, 2) /* (AA24) PRG0_PRU0_GPO15.PRG0_RGMII1_TD3 */
+			AM65X_IOPAD(0x0234, PIN_INPUT, 2) /* (AD28) PRG0_PRU0_GPO16.PRG0_RGMII1_TXC */
+			AM65X_IOPAD(0x0220, PIN_OUTPUT, 2) /* (AB25) PRG0_PRU0_GPO11.PRG0_RGMII1_TX_CTL */
+			AM65X_IOPAD(0x020c, PIN_INPUT, 2) /* (Y25) PRG0_PRU0_GPO6.PRG0_RGMII1_RXC */
+			AM65X_IOPAD(0x0204, PIN_INPUT, 2) /* (Y24) PRG0_PRU0_GPO4.PRG0_RGMII1_RX_CTL */
+			/* HACK As there is no driver for mdio */
+			AM65X_IOPAD(0x0294, PIN_INPUT , 0) /* (AE26) PRG0_MDIO0_MDIO */
+			AM65X_IOPAD(0x0298, PIN_OUTPUT , 0) /* (AE28) PRG0_MDIO0_MDC */
+		>;
+	};
+
+	icssg0_mdio_pins_default: icssg0_mdio_pins_default {
+		pinctrl-single,pins = <
+			AM65X_IOPAD(0x0294, PIN_INPUT, 0) /* (AE26) PRG0_MDIO0_MDIO */
+			AM65X_IOPAD(0x0298, PIN_OUTPUT, 0) /* (AE28) PRG0_MDIO0_MDC */
+		>;
+	};
 };
 
 &main_pmx1 {
@@ -541,6 +639,18 @@
 	};
 };
 
+&msmc_ram {
+	icssg0_sram: icssg0-sram@40000 {
+		reg = <0x40000 0x10000>;
+	};
+	icssg1_sram: icssg1-sram@50000 {
+		reg = <0x50000 0x10000>;
+	};
+	icssg2_sram: icssg2-sram@60000 {
+		reg = <0x60000 0x10000>;
+	};
+};
+
 &k3_pds {
 	u-boot,dm-spl;
 };
@@ -556,3 +666,21 @@
 &fss {
 	u-boot,dm-spl;
 };
+
+&icssg0_mdio {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&icssg0_mdio_pins_default>;
+
+	pruss0_eth0_phy: ethernet-phy@0 {
+		reg = <0>;
+		ti,rx-internal-delay = <DP83867_RGMIIDCTL_2_00_NS>;
+		ti,fifo-depth = <DP83867_PHYCR_FIFO_DEPTH_4_B_NIB>;
+	};
+
+	pruss0_eth1_phy: ethernet-phy@1 {
+		reg = <1>;
+		ti,rx-internal-delay = <DP83867_RGMIIDCTL_2_00_NS>;
+		ti,fifo-depth = <DP83867_PHYCR_FIFO_DEPTH_4_B_NIB>;
+	};
+};
diff --git a/board/siemens/iot2050/README b/board/siemens/iot2050/README
index b63f05b5cf..35ebb3c8a5 100644
--- a/board/siemens/iot2050/README
+++ b/board/siemens/iot2050/README
@@ -25,6 +25,10 @@ The following binaries from that source need to be present in the build folder:
  - tiboot3.bin
  - sysfw.itb
  - sysfw.itb_HS
+ - am65x-pru0-prueth-fw.elf
+ - am65x-pru1-prueth-fw.elf
+ - am65x-rtu0-prueth-fw.elf
+ - am65x-rtu1-prueth-fw.elf
 
 
 Building
diff --git a/configs/iot2050_defconfig b/configs/iot2050_defconfig
index 6c5e5e80de..31931e7a5a 100644
--- a/configs/iot2050_defconfig
+++ b/configs/iot2050_defconfig
@@ -47,7 +47,6 @@ CONFIG_CMD_DFU=y
 CONFIG_CMD_GPT=y
 CONFIG_CMD_I2C=y
 CONFIG_CMD_MMC=y
-# CONFIG_CMD_NET is not set
 CONFIG_CMD_PCI=y
 CONFIG_CMD_REMOTEPROC=y
 CONFIG_CMD_USB=y
@@ -63,11 +62,11 @@ CONFIG_SPL_OF_LIST="iot2050-spl"
 CONFIG_SPL_MULTI_DTB_FIT_NO_COMPRESSION=y
 CONFIG_ENV_IS_IN_SPI_FLASH=y
 CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
-# CONFIG_NET is not set
 CONFIG_DM=y
 CONFIG_SPL_DM=y
 CONFIG_SPL_DM_SEQ_ALIAS=y
 CONFIG_SPL_REGMAP=y
+CONFIG_SPL_SYSCON=y
 CONFIG_SPL_OF_TRANSLATE=y
 CONFIG_CLK=y
 CONFIG_SPL_CLK=y
@@ -99,8 +98,10 @@ CONFIG_DM_SPI_FLASH=y
 CONFIG_SPI_FLASH_SFDP_SUPPORT=y
 CONFIG_SPI_FLASH_WINBOND=y
 # CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_PHY_TI=y
 CONFIG_DM_ETH=y
 # CONFIG_TI_AM65_CPSW_NUSS is not set
+CONFIG_TI_AM64_ICSSG_PRUETH=y
 CONFIG_PCI=y
 CONFIG_DM_PCI=y
 CONFIG_PCI_KEYSTONE=y
@@ -115,10 +116,12 @@ CONFIG_PINCTRL_SINGLE=y
 CONFIG_POWER_DOMAIN=y
 CONFIG_TI_SCI_POWER_DOMAIN=y
 CONFIG_REMOTEPROC_TI_K3_R5F=y
+CONFIG_REMOTEPROC_TI_PRU=y
 CONFIG_DM_RESET=y
 CONFIG_RESET_TI_SCI=y
 CONFIG_DM_SERIAL=y
 CONFIG_SOC_TI=y
+CONFIG_TI_PRUSS=y
 CONFIG_SPI=y
 CONFIG_DM_SPI=y
 CONFIG_CADENCE_QSPI=y
diff --git a/include/configs/iot2050.h b/include/configs/iot2050.h
index 2d1b1b1150..7c0d340f6b 100644
--- a/include/configs/iot2050.h
+++ b/include/configs/iot2050.h
@@ -26,15 +26,21 @@
 /* U-Boot general configuration */
 #define EXTRA_ENV_IOT2050_BOARD_SETTINGS				\
 	"loadaddr=0x80080000\0"						\
+	"pxefile_addr_r=0x80080000\0"					\
 	"scriptaddr=0x83000000\0"					\
 	"kernel_addr_r=0x80080000\0"					\
 	"ramdisk_addr_r=0x81000000\0"					\
 	"fdt_addr_r=0x82000000\0"					\
 	"overlay_addr_r=0x83000000\0"					\
+	"load_icssg0_pru1_fw=sf read $loadaddr 0x7d0000 0x8000; rproc load 4 $loadaddr 0x8000\0" \
+	"load_icssg0_rtu1_fw=sf read $loadaddr 0x7f0000 0x8000; rproc load 5 $loadaddr 0x8000\0" \
+	"init_icssg0=rproc init; sf probe; run load_icssg0_pru1_fw; run load_icssg0_rtu1_fw\0" \
 	"usb_pgood_delay=900\0"
 
 #ifndef CONFIG_SPL_BUILD
 
+#define BOOTENV_RUN_NET_PLATFORM_START	"run init_icssg0; "
+
 /*
  * This defines all MMC devices, even if the basic variant has no mmc1.
  * The non-supported device will be removed from the boot targets during
@@ -45,7 +51,9 @@
 	func(MMC, mmc, 0) \
 	func(USB, usb, 0) \
 	func(USB, usb, 1) \
-	func(USB, usb, 2)
+	func(USB, usb, 2) \
+	func(PXE, pxe, na) \
+	func(DHCP, dhcp, na)
 
 #include <config_distro_bootcmd.h>
 
-- 
2.17.1

