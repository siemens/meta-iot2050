From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Felix Moessbauer <felix.moessbauer@siemens.com>
Date: Fri, 12 Jan 2024 18:56:16 +0100
Subject: [PATCH] do not use spdlog formatting internals

As a preparation for using the packaged versions of spdlog, we need
to avoid including spdlog internal headers. These headers are only
available when using the builtin fmt library, but distros ususally
ship an external version of libfmt. Also, the external version is more
strict w.r.t formatting of enums by requiring either a formatter, or
an explicit cast to the underlaying integer type. For the sake of
simplicity, we introduce the cast.

Signed-off-by: Felix Moessbauer <felix.moessbauer@siemens.com>
Signed-off-by: Li Hua Qian <huaqian.li@siemens.com>
---
 hailort/common/utils.hpp                          |  4 +++-
 .../resource_manager/resource_manager_builder.cpp |  3 ++-
 .../libhailort/src/stream_common/nms_stream.cpp   | 15 ++++++++++-----
 .../libhailort/src/vdma/channel/channel_id.hpp    |  2 +-
 4 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/hailort/common/utils.hpp b/hailort/common/utils.hpp
index 3eb719e2c13c..1de45bd0b325 100644
--- a/hailort/common/utils.hpp
+++ b/hailort/common/utils.hpp
@@ -17,7 +17,8 @@
 #include "hailo/buffer.hpp"
 
 #include "common/logger_macros.hpp"
-#include <spdlog/fmt/bundled/core.h>
+#include <spdlog/spdlog.h>
+#include <spdlog/fmt/ostr.h>
 
 #include <assert.h>
 #include <map>
@@ -26,6 +27,7 @@
 #include <cstdint>
 #include <cstddef>
 #include <fstream>
+#include <algorithm>
 
 
 namespace hailort
diff --git a/hailort/libhailort/src/core_op/resource_manager/resource_manager_builder.cpp b/hailort/libhailort/src/core_op/resource_manager/resource_manager_builder.cpp
index 0f8985f0ae77..627273b8bfe5 100644
--- a/hailort/libhailort/src/core_op/resource_manager/resource_manager_builder.cpp
+++ b/hailort/libhailort/src/core_op/resource_manager/resource_manager_builder.cpp
@@ -1096,7 +1096,8 @@ static Expected<ContextSwitchConfigActionPtr> create_switch_lcu_batch_action(con
     CHECK_AS_EXPECTED((ContextSwitchConfigAction::Type::EnableLcuDefault == action->get_type()) ||
         (ContextSwitchConfigAction::Type::SwitchLcuBatch == action->get_type()) ||
         (ContextSwitchConfigAction::Type::EnableLcuNonDefault == action->get_type()), HAILO_INVALID_ARGUMENT,
-        "Invalid action type - must be enable lcu (default or non default) or switch lcu batch, Received type {}", action->get_type());
+        "Invalid action type - must be enable lcu (default or non default), Received type {}",
+        static_cast<int>(action->get_type()));
 
     TRY(const auto params_buffer, action->serialize_params(context_resources));
 
diff --git a/hailort/libhailort/src/stream_common/nms_stream.cpp b/hailort/libhailort/src/stream_common/nms_stream.cpp
index 79aa29c4b4d8..7d43948a1f1a 100644
--- a/hailort/libhailort/src/stream_common/nms_stream.cpp
+++ b/hailort/libhailort/src/stream_common/nms_stream.cpp
@@ -77,7 +77,8 @@ hailo_status NMSStreamReader::advance_state_machine(NMSBurstState *burst_state,
             if (HAILO_BURST_TYPE_H8_PER_CLASS == burst_type) {
                 CHECK_IN_DEBUG((NMSBurstState::NMS_BURST_STATE_WAITING_FOR_DELIMETER == (*burst_state)) ||
                     (NMSBurstState::NMS_BURST_STATE_WAITING_FOR_PADDING == (*burst_state)), HAILO_NMS_BURST_INVALID_DATA,
-                    "Invalid state, H8 NMS burst cannot receive delimeter while in state {}", (*burst_state));
+                    "Invalid state, H8 NMS burst cannot receive delimeter while in state {}",
+                    static_cast<int>(*burst_state));
                 // To differentiate from H8 padding - where we should not increment amount of delimeters found
                 if ((*burst_state) == NMSBurstState::NMS_BURST_STATE_WAITING_FOR_DELIMETER) {
                     (*num_delimeters_received)++;
@@ -99,12 +100,14 @@ hailo_status NMSStreamReader::advance_state_machine(NMSBurstState *burst_state,
 
             } else if (HAILO_BURST_TYPE_H15_PER_CLASS == burst_type) {
                 CHECK_IN_DEBUG(NMSBurstState::NMS_BURST_STATE_WAITING_FOR_DELIMETER == (*burst_state), HAILO_NMS_BURST_INVALID_DATA,
-                    "Invalid state, H15 Per class NMS burst cannot receive delimeter while in state {}", (*burst_state));
+                    "Invalid state, H15 Per class NMS burst cannot receive delimeter while in state {}",
+                    static_cast<int>(*burst_state));
                 (*num_delimeters_received)++;
                 *burst_state = NMSBurstState::NMS_BURST_STATE_WAITING_FOR_IMAGE_DELIMETER;
             } else {
                 CHECK_IN_DEBUG(NMSBurstState::NMS_BURST_STATE_WAITING_FOR_DELIMETER == (*burst_state), HAILO_NMS_BURST_INVALID_DATA,
-                    "Invalid state, H15 Per Frame NMS burst cannot receive delimeter while in state {}", (*burst_state));
+                    "Invalid state, H15 Per Frame NMS burst cannot receive delimeter while in state {}", 
+                    static_cast<int>(*burst_state));
                 // in hailo15 per frame - if number of delimeter is same as num classes - we expect image delimeter next 
                 // otherwise expect another delimeter
                 (*num_delimeters_received)++;
@@ -121,7 +124,8 @@ hailo_status NMSStreamReader::advance_state_machine(NMSBurstState *burst_state,
                 "Invalid state, H8 NMS burst cannot receive image delimeter");
 
             CHECK_IN_DEBUG(NMSBurstState::NMS_BURST_STATE_WAITING_FOR_IMAGE_DELIMETER == (*burst_state), HAILO_NMS_BURST_INVALID_DATA,
-                "Invalid state, H15 NMS burst cannot receive image delimeter in state {}", (*burst_state));
+                "Invalid state, H15 NMS burst cannot receive image delimeter in state {}",
+                static_cast<int>(*burst_state));
 
             // in both hailo15 per class and per frame - when receiving image delimeter we move to expecting padding
             *burst_state = NMSBurstState::NMS_BURST_STATE_WAITING_FOR_PADDING;
@@ -143,7 +147,8 @@ hailo_status NMSStreamReader::advance_state_machine(NMSBurstState *burst_state,
         {
             if ((HAILO_BURST_TYPE_H15_PER_CLASS == burst_type) || (HAILO_BURST_TYPE_H15_PER_FRAME == burst_type)) {
                 CHECK_IN_DEBUG(NMSBurstState::NMS_BURST_STATE_WAITING_FOR_PADDING == (*burst_state), HAILO_NMS_BURST_INVALID_DATA,
-                    "Invalid state, H15 NMS burst cannot receive padding in state {}", (*burst_state));
+                    "Invalid state, H15 NMS burst cannot receive padding in state {}",
+                    static_cast<int>(*burst_state));
             }
             // In case of padding next state is wait for padding unless it is last padding of burst - then next state will be
             // Wait for delimeter - will only get to this stage in debug - in release once image delimeter is read we ignore rest of
diff --git a/hailort/libhailort/src/vdma/channel/channel_id.hpp b/hailort/libhailort/src/vdma/channel/channel_id.hpp
index 09fb0432edd3..9928c31a343a 100644
--- a/hailort/libhailort/src/vdma/channel/channel_id.hpp
+++ b/hailort/libhailort/src/vdma/channel/channel_id.hpp
@@ -12,7 +12,7 @@
 
 #include "hailo/hailort.h"
 #include "common/logger_macros.hpp"
-#include <spdlog/fmt/bundled/format.h>
+#include <spdlog/spdlog.h>
 #include <sstream>
 
 
