From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jan Kiszka <jan.kiszka@siemens.com>
Date: Fri, 3 Nov 2023 12:18:44 +0100
Subject: [PATCH] net: ti: icss_iep: Add SR1 support

This brings SR1 support to the Industrial Ethernet Peripheral driver so
that PTP and PPS is working with that revision as well.

Forward-ported from the TI SDK.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 drivers/net/ethernet/ti/icssg/icss_iep.c | 116 ++++++++++++++++++++++-
 1 file changed, 114 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/ti/icssg/icss_iep.c b/drivers/net/ethernet/ti/icssg/icss_iep.c
index 4cf2a52e4378..b208042c381a 100644
--- a/drivers/net/ethernet/ti/icssg/icss_iep.c
+++ b/drivers/net/ethernet/ti/icssg/icss_iep.c
@@ -32,6 +32,7 @@
 
 #define IEP_GLOBAL_STATUS_CNT_OVF	BIT(0)
 
+#define CMP_INDEX(sync)			((sync) + 1)
 #define IEP_CMP_CFG_SHADOW_EN		BIT(17)
 #define IEP_CMP_CFG_CMP0_RST_CNT_EN	BIT(0)
 #define IEP_CMP_CFG_CMP_EN(cmp)		(GENMASK(16, 1) & (1 << ((cmp) + 1)))
@@ -122,6 +123,7 @@ struct icss_iep {
 	int cap_cmp_irq;
 	u64 period;
 	u32 latch_enable;
+	struct hrtimer sync_timer;
 };
 
 /**
@@ -560,6 +562,8 @@ static int icss_iep_perout_enable(struct icss_iep *iep,
 		goto exit;
 
 	spin_lock_irqsave(&iep->irq_lock, flags);
+	if (iep->cap_cmp_irq)
+		hrtimer_cancel(&iep->sync_timer);
 	ret = icss_iep_perout_enable_hw(iep, req, on);
 	if (!ret)
 		iep->perout_enabled = !!on;
@@ -571,6 +575,80 @@ static int icss_iep_perout_enable(struct icss_iep *iep,
 	return ret;
 }
 
+static irqreturn_t icss_iep_cap_cmp_handler(int irq, void *dev_id)
+{
+	struct icss_iep *iep = (struct icss_iep *)dev_id;
+	unsigned int val, index = 0, i, sts;
+	struct ptp_clock_event pevent;
+	irqreturn_t ret = IRQ_NONE;
+	unsigned long flags;
+	u64 ns, ns_next;
+
+	spin_lock_irqsave(&iep->irq_lock, flags);
+
+	val = readl(iep->base + iep->plat_data->reg_offs[ICSS_IEP_CMP_STAT_REG]);
+	if (val & BIT(CMP_INDEX(index))) {
+		writel(BIT(CMP_INDEX(index)),
+		       iep->base + iep->plat_data->reg_offs[ICSS_IEP_CMP_STAT_REG]);
+
+		if (!iep->pps_enabled && !iep->perout_enabled)
+			goto do_latch;
+
+		ns = readl(iep->base + iep->plat_data->reg_offs[ICSS_IEP_CMP1_REG0]);
+		if (iep->plat_data->flags & ICSS_IEP_64BIT_COUNTER_SUPPORT) {
+			val = readl(iep->base + iep->plat_data->reg_offs[ICSS_IEP_CMP1_REG1]);
+			ns |= (u64)val << 32;
+		}
+		/* set next event */
+		ns_next = ns + iep->period;
+		writel(lower_32_bits(ns_next),
+		       iep->base + iep->plat_data->reg_offs[ICSS_IEP_CMP1_REG0]);
+		if (iep->plat_data->flags & ICSS_IEP_64BIT_COUNTER_SUPPORT)
+			writel(upper_32_bits(ns_next),
+			       iep->base + iep->plat_data->reg_offs[ICSS_IEP_CMP1_REG1]);
+
+		pevent.pps_times.ts_real = ns_to_timespec64(ns);
+		pevent.type = PTP_CLOCK_PPSUSR;
+		pevent.index = index;
+		ptp_clock_event(iep->ptp_clock, &pevent);
+		dev_dbg(iep->dev, "IEP:pps ts: %llu next:%llu:\n", ns, ns_next);
+
+		hrtimer_start(&iep->sync_timer, ms_to_ktime(110), /* 100ms + buffer */
+			      HRTIMER_MODE_REL);
+
+		ret = IRQ_HANDLED;
+	}
+
+do_latch:
+	sts = readl(iep->base + iep->plat_data->reg_offs[ICSS_IEP_CAPTURE_STAT_REG]);
+	if (!sts)
+		goto cap_cmp_exit;
+
+	for (i = 0; i < iep->ptp_info.n_ext_ts; i++) {
+		if (sts & IEP_CAP_CFG_CAPNR_1ST_EVENT_EN(i * 2)) {
+			ns = readl(iep->base +
+				   iep->plat_data->reg_offs[ICSS_IEP_CAP6_RISE_REG0 +
+							    (i * 2)]);
+			if (iep->plat_data->flags & ICSS_IEP_64BIT_COUNTER_SUPPORT) {
+				val = readl(iep->base +
+					    iep->plat_data->reg_offs[ICSS_IEP_CAP6_RISE_REG0 +
+								     (i * 2) + 1]);
+				ns |= (u64)val << 32;
+			}
+			pevent.timestamp = ns;
+			pevent.type = PTP_CLOCK_EXTTS;
+			pevent.index = i;
+			ptp_clock_event(iep->ptp_clock, &pevent);
+			dev_dbg(iep->dev, "IEP:extts index=%d ts: %llu\n", i, ns);
+			ret = IRQ_HANDLED;
+		}
+	}
+
+cap_cmp_exit:
+	spin_unlock_irqrestore(&iep->irq_lock, flags);
+	return ret;
+}
+
 static int icss_iep_pps_enable(struct icss_iep *iep, int on)
 {
 	struct ptp_clock_request rq;
@@ -601,6 +679,8 @@ static int icss_iep_pps_enable(struct icss_iep *iep, int on)
 		rq.perout.start.nsec = 0;
 		ret = icss_iep_perout_enable_hw(iep, &rq.perout, on);
 	} else {
+		if (iep->cap_cmp_irq)
+			hrtimer_cancel(&iep->sync_timer);
 		ret = icss_iep_perout_enable_hw(iep, &rq.perout, on);
 	}
 
@@ -676,6 +756,18 @@ static struct ptp_clock_info icss_iep_ptp_info = {
 	.enable		= icss_iep_ptp_enable,
 };
 
+static enum hrtimer_restart icss_iep_sync0_work(struct hrtimer *timer)
+{
+	struct icss_iep *iep = container_of(timer, struct icss_iep, sync_timer);
+
+	writel(0, iep->base + iep->plat_data->reg_offs[ICSS_IEP_SYNC_CTRL_REG]);
+	writel(IEP_SYNC_CTRL_SYNC_N_EN(0) | IEP_SYNC_CTRL_SYNC_EN,
+	       iep->base + iep->plat_data->reg_offs[ICSS_IEP_SYNC_CTRL_REG]);
+	writel(1, iep->base + iep->plat_data->reg_offs[ICSS_IEP_SYNC0_STAT_REG]);
+
+	return HRTIMER_NORESTART;
+}
+
 struct icss_iep *icss_iep_get_idx(struct device_node *np, int idx)
 {
 	struct platform_device *pdev;
@@ -724,6 +816,8 @@ void icss_iep_put(struct icss_iep *iep)
 	iep->client_np = NULL;
 	device_unlock(iep->dev);
 	put_device(iep->dev);
+	if (iep->cap_cmp_irq)
+		hrtimer_cancel(&iep->sync_timer);
 }
 EXPORT_SYMBOL_GPL(icss_iep_put);
 
@@ -774,12 +868,12 @@ int icss_iep_init(struct icss_iep *iep, const struct icss_iep_clockops *clkops,
 	    !(iep->plat_data->flags & ICSS_IEP_SLOW_COMPEN_REG_SUPPORT))
 		goto skip_perout;
 
-	if (iep->ops && iep->ops->perout_enable) {
+	if (iep->cap_cmp_irq || (iep->ops && iep->ops->perout_enable)) {
 		iep->ptp_info.n_per_out = 1;
 		iep->ptp_info.pps = 1;
 	}
 
-	if (iep->ops && iep->ops->extts_enable)
+	if (iep->cap_cmp_irq || (iep->ops && iep->ops->extts_enable))
 		iep->ptp_info.n_ext_ts = 2;
 
 skip_perout:
@@ -817,6 +911,7 @@ static int icss_iep_probe(struct platform_device *pdev)
 	struct device *dev = &pdev->dev;
 	struct icss_iep *iep;
 	struct clk *iep_clk;
+	int ret;
 
 	iep = devm_kzalloc(dev, sizeof(*iep), GFP_KERNEL);
 	if (!iep)
@@ -827,6 +922,23 @@ static int icss_iep_probe(struct platform_device *pdev)
 	if (IS_ERR(iep->base))
 		return -ENODEV;
 
+	iep->cap_cmp_irq = platform_get_irq_byname_optional(pdev, "iep_cap_cmp");
+	if (iep->cap_cmp_irq < 0) {
+		if (iep->cap_cmp_irq == -EPROBE_DEFER)
+			return iep->cap_cmp_irq;
+		iep->cap_cmp_irq = 0;
+	} else {
+		ret = devm_request_irq(dev, iep->cap_cmp_irq,
+				       icss_iep_cap_cmp_handler, IRQF_TRIGGER_HIGH,
+				       "iep_cap_cmp", iep);
+		if (ret) {
+			dev_err(iep->dev, "Request irq failed for cap_cmp %d\n", ret);
+			return ret;
+		}
+		hrtimer_init(&iep->sync_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+		iep->sync_timer.function = icss_iep_sync0_work;
+	}
+
 	iep_clk = devm_clk_get(dev, NULL);
 	if (IS_ERR(iep_clk))
 		return PTR_ERR(iep_clk);
