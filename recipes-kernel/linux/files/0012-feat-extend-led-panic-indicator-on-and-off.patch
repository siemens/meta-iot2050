From 3bfdadfd677280e904bfcc25ee9ff3c777e90c0b Mon Sep 17 00:00:00 2001
From: Gao Nian <nian.gao@siemens.com>
Date: Fri, 3 Jan 2020 14:50:16 +0800
Subject: [PATCH 12/17] feat:extend led panic-indicator on and off

Signed-off-by: Gao Nian <nian.gao@siemens.com>
---
 arch/arm64/boot/dts/siemens/iot2050-common.dtsi |  1 +
 drivers/leds/led-triggers.c                     | 10 ++++++++--
 drivers/leds/leds-gpio.c                        | 13 ++++++++++---
 drivers/leds/trigger/ledtrig-panic.c            |  5 ++++-
 include/linux/leds.h                            |  8 +++++++-
 5 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/arch/arm64/boot/dts/siemens/iot2050-common.dtsi b/arch/arm64/boot/dts/siemens/iot2050-common.dtsi
index 0b5e05ea8ba0..89f354528830 100644
--- a/arch/arm64/boot/dts/siemens/iot2050-common.dtsi
+++ b/arch/arm64/boot/dts/siemens/iot2050-common.dtsi
@@ -132,6 +132,7 @@
 
 		status-led-green {
 			gpios = <&wkup_gpio0 24 GPIO_ACTIVE_HIGH>;
+			panic-indicator-off;
 			linux,default-trigger = "gpio";
 		};
 
diff --git a/drivers/leds/led-triggers.c b/drivers/leds/led-triggers.c
index e4cb3811e82a..1ddf9f33e2cb 100644
--- a/drivers/leds/led-triggers.c
+++ b/drivers/leds/led-triggers.c
@@ -322,8 +322,14 @@ void led_trigger_event(struct led_trigger *trig,
 		return;
 
 	read_lock(&trig->leddev_list_lock);
-	list_for_each_entry(led_cdev, &trig->led_cdevs, trig_list)
-		led_set_brightness(led_cdev, brightness);
+	list_for_each_entry(led_cdev, &trig->led_cdevs, trig_list) {
+		if (led_cdev->flags & LED_PANIC_INDICATOR)
+			led_set_brightness(led_cdev, brightness);
+		else if (led_cdev->flags & LED_PANIC_INDICATOR_OFF)
+			led_set_brightness(led_cdev, LED_OFF);
+		else if (led_cdev->flags & LED_PANIC_INDICATOR_ON)
+			led_set_brightness(led_cdev, LED_FULL);
+	}
 	read_unlock(&trig->leddev_list_lock);
 }
 EXPORT_SYMBOL_GPL(led_trigger_event);
diff --git a/drivers/leds/leds-gpio.c b/drivers/leds/leds-gpio.c
index 764c31301f90..2cdc529874d5 100644
--- a/drivers/leds/leds-gpio.c
+++ b/drivers/leds/leds-gpio.c
@@ -132,8 +132,12 @@ static int create_gpio_led(const struct gpio_led *template,
 	led_dat->cdev.brightness = state ? LED_FULL : LED_OFF;
 	if (!template->retain_state_suspended)
 		led_dat->cdev.flags |= LED_CORE_SUSPENDRESUME;
-	if (template->panic_indicator)
+	if (template->panic_indicator == LEDS_PANICINDICATOR_BLINK)
 		led_dat->cdev.flags |= LED_PANIC_INDICATOR;
+	else if (template->panic_indicator == LEDS_PANICINDICATOR_OFF)
+		led_dat->cdev.flags |= LED_PANIC_INDICATOR_OFF;
+	else if (template->panic_indicator == LEDS_PANICINDICATOR_ON)
+		led_dat->cdev.flags |= LED_PANIC_INDICATOR_ON;
 	if (template->retain_state_shutdown)
 		led_dat->cdev.flags |= LED_RETAIN_AT_SHUTDOWN;
 
@@ -210,8 +214,11 @@ static struct gpio_leds_priv *gpio_leds_create(struct platform_device *pdev)
 		if (fwnode_property_present(child, "retain-state-shutdown"))
 			led.retain_state_shutdown = 1;
 		if (fwnode_property_present(child, "panic-indicator"))
-			led.panic_indicator = 1;
-
+			led.panic_indicator = LEDS_PANICINDICATOR_BLINK;
+		else if (fwnode_property_present(child, "panic-indicator-off"))
+			led.panic_indicator = LEDS_PANICINDICATOR_OFF;
+		else if (fwnode_property_present(child, "panic-indicator-on"))
+			led.panic_indicator = LEDS_PANICINDICATOR_ON;
 		ret = create_gpio_led(&led, led_dat, dev, np, NULL);
 		if (ret < 0) {
 			fwnode_handle_put(child);
diff --git a/drivers/leds/trigger/ledtrig-panic.c b/drivers/leds/trigger/ledtrig-panic.c
index d735526b9db4..21af54355cf8 100644
--- a/drivers/leds/trigger/ledtrig-panic.c
+++ b/drivers/leds/trigger/ledtrig-panic.c
@@ -36,6 +36,7 @@ static void led_trigger_set_panic(struct led_classdev *led_cdev)
 		/* Avoid the delayed blink path */
 		led_cdev->blink_delay_on = 0;
 		led_cdev->blink_delay_off = 0;
+		led_cdev->work_flags = 0;
 
 		led_cdev->trigger = trig;
 		if (trig->activate)
@@ -50,7 +51,9 @@ static int led_trigger_panic_notifier(struct notifier_block *nb,
 	struct led_classdev *led_cdev;
 
 	list_for_each_entry(led_cdev, &leds_list, node)
-		if (led_cdev->flags & LED_PANIC_INDICATOR)
+		if ((led_cdev->flags & LED_PANIC_INDICATOR)
+			|| (led_cdev->flags & LED_PANIC_INDICATOR_OFF)
+			|| (led_cdev->flags & LED_PANIC_INDICATOR_ON))
 			led_trigger_set_panic(led_cdev);
 	return NOTIFY_DONE;
 }
diff --git a/include/linux/leds.h b/include/linux/leds.h
index 577dadc4990a..73090c752808 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -51,6 +51,8 @@ struct led_classdev {
 #define LED_PANIC_INDICATOR	BIT(20)
 #define LED_BRIGHT_HW_CHANGED	BIT(21)
 #define LED_RETAIN_AT_SHUTDOWN	BIT(22)
+#define LED_PANIC_INDICATOR_OFF BIT(23)
+#define LED_PANIC_INDICATOR_ON  BIT(24)
 
 	/* set_brightness_work / blink_timer flags, atomic, private. */
 	unsigned long		work_flags;
@@ -421,7 +423,7 @@ struct gpio_led {
 	unsigned 	gpio;
 	unsigned	active_low : 1;
 	unsigned	retain_state_suspended : 1;
-	unsigned	panic_indicator : 1;
+	unsigned	panic_indicator : 2;
 	unsigned	default_state : 2;
 	unsigned	retain_state_shutdown : 1;
 	/* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
@@ -431,6 +433,10 @@ struct gpio_led {
 #define LEDS_GPIO_DEFSTATE_ON		1
 #define LEDS_GPIO_DEFSTATE_KEEP		2
 
+#define LEDS_PANICINDICATOR_BLINK   1
+#define LEDS_PANICINDICATOR_OFF     2
+#define LEDS_PANICINDICATOR_ON      3
+
 struct gpio_led_platform_data {
 	int 		num_leds;
 	const struct gpio_led *leds;
-- 
2.17.1

