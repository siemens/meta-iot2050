From 47ef4b95e0163e26b403dc03aa082038dea470ac Mon Sep 17 00:00:00 2001
From: Su Bao Cheng <baocheng.su@siemens.com>
Date: Mon, 15 Jul 2019 15:46:09 +0800
Subject: [PATCH 03/17] feat: Add CP210x driver support to software flow
 control

Signed-off-by: Wang Sheng Long <shenglong.wang.ext@siemens.com>
---
 drivers/usb/serial/cp210x.c | 126 ++++++++++++++++++++++++++++++++++--
 1 file changed, 121 insertions(+), 5 deletions(-)

diff --git a/drivers/usb/serial/cp210x.c b/drivers/usb/serial/cp210x.c
index 7ae121567098..7815062ed980 100644
--- a/drivers/usb/serial/cp210x.c
+++ b/drivers/usb/serial/cp210x.c
@@ -381,6 +381,10 @@ static struct usb_serial_driver * const serial_drivers[] = {
 #define CP210X_PARTNUM_CP2102N_QFN20	0x22
 #define CP210X_PARTNUM_UNKNOWN	0xFF
 
+/*vstart and vstop define*/
+#define CP210X_VSTART  0x11
+#define CP210X_VSTOP   0x13
+
 /* CP210X_GET_COMM_STATUS returns these 0x13 bytes */
 struct cp210x_comm_status {
 	__le32   ulErrors;
@@ -392,6 +396,16 @@ struct cp210x_comm_status {
 	u8       bReserved;
 } __packed;
 
+/* Characrters Respones 6 bytes*/
+struct cp210x_chars_respones{
+	u8       bEofchar;
+	u8       bErrochar;
+	u8       bBreakchar;
+	u8       bEventchar;
+	u8       bXonchar;
+	u8       bXoffchar;
+} __packed;
+
 /*
  * CP210X_PURGE - 16 bits passed in wValue of USB request.
  * SiLabs app note AN571 gives a strange description of the 4 bits:
@@ -625,6 +639,52 @@ static int cp210x_read_vendor_block(struct usb_serial *serial, u8 type, u16 val,
 	return result;
 }
 
+/*
+ *func:  Read and Write Characrters Respones
+ *       operate Register SET_CHARS/GET_CHATS
+ */
+static int cp210x_operate_chars_block(struct usb_serial_port *port, u8 req, u8 type,
+		void *buf, int bufsize)
+{
+	struct usb_serial *serial = port->serial;
+	struct cp210x_port_private *port_priv = usb_get_serial_port_data(port);
+	void *dmabuf;
+	int result;
+
+	dmabuf = kmemdup(buf,bufsize, GFP_KERNEL);
+	if (!dmabuf) {
+		/*
+		 * FIXME Some callers don't bother to check for error,
+		 * at least give them consistent junk until they are fixed
+		 */
+		memset(buf, 0, bufsize);
+		return -ENOMEM;
+	}
+
+	result = usb_control_msg(serial->dev, usb_rcvctrlpipe(serial->dev, 0),
+			req, type, 0, port_priv->bInterfaceNumber, dmabuf, bufsize,
+			USB_CTRL_SET_TIMEOUT);
+	if (result == bufsize) {
+		memcpy(buf, dmabuf, bufsize);
+		result = 0;
+	} else {
+		dev_err(&port->dev, "failed get req 0x%x size %d status: %d\n",
+				req, bufsize, result);
+		if (result >= 0)
+			result = -EIO;
+
+		/*
+		 * FIXME Some callers don't bother to check for error,
+		 * at least give them consistent junk until they are fixed
+		 */
+		memset(buf, 0, bufsize);
+	}
+
+	kfree(dmabuf);
+
+	return result;
+}
+
 /*
  * Writes any 16-bit CP210X_ register (req) whose value is passed
  * entirely in the wValue field of the USB request.
@@ -1135,11 +1195,18 @@ static void cp210x_set_termios(struct tty_struct *tty,
 		struct usb_serial_port *port, struct ktermios *old_termios)
 {
 	struct device *dev = &port->dev;
-	unsigned int cflag, old_cflag;
+	struct usb_serial *serial = port->serial;
+	struct cp210x_chars_respones *CharsRes = NULL;
+	struct cp210x_flow_ctl flow_ctl;
+	unsigned int cflag, old_cflag, iflag;
 	u16 bits;
+	int result;
+	u32 ctl_hs;
+	u32 flow_repl;
 
 	cflag = tty->termios.c_cflag;
 	old_cflag = old_termios->c_cflag;
+	iflag = tty->termios.c_iflag;
 
 	if (tty->termios.c_ospeed != old_termios->c_ospeed)
 		cp210x_change_speed(tty, port, old_termios);
@@ -1213,10 +1280,6 @@ static void cp210x_set_termios(struct tty_struct *tty,
 	}
 
 	if ((cflag & CRTSCTS) != (old_cflag & CRTSCTS)) {
-		struct cp210x_flow_ctl flow_ctl;
-		u32 ctl_hs;
-		u32 flow_repl;
-
 		cp210x_read_reg_block(port, CP210X_GET_FLOW, &flow_ctl,
 				sizeof(flow_ctl));
 		ctl_hs = le32_to_cpu(flow_ctl.ulControlHandshake);
@@ -1253,6 +1316,59 @@ static void cp210x_set_termios(struct tty_struct *tty,
 				sizeof(flow_ctl));
 	}
 
+	/* Set Software  Flow  Control
+	 * Xon/Xoff code
+	 * Check the IXOFF/IXON status in the iflag component of the
+	 * termios structure.
+	 *
+	 */
+	if  ((iflag & IXOFF) || (iflag & IXON)) {
+		/*set vstart/vstop chars */
+		CharsRes = kmalloc(sizeof(*CharsRes), GFP_KERNEL);
+		if (!CharsRes) {
+			dev_err(dev, "Characrters Respones kmalloc failed "
+					"xon/xoff software flow control\n");
+			return;
+		}
+		result = cp210x_operate_chars_block(port, CP210X_GET_CHARS,
+					  REQTYPE_DEVICE_TO_HOST, CharsRes, sizeof(*CharsRes));
+		dev_dbg(dev, "%s -  bXonchar=0x%x   bXoffchar=0x%x   \n",
+				__func__, CharsRes->bXonchar ,CharsRes->bXoffchar);
+		if (result < 0){
+			kfree(CharsRes);
+			dev_err(dev, "Read Characrters Respones  failed "
+					"xon/xoff software flow control\n");
+			return;
+		}
+		CharsRes->bXonchar  = CP210X_VSTART;
+		CharsRes->bXoffchar = CP210X_VSTOP;
+		result = cp210x_operate_chars_block(port, CP210X_SET_CHARS,
+					 REQTYPE_HOST_TO_INTERFACE, CharsRes, sizeof(*CharsRes));
+		if (result < 0){
+			kfree(CharsRes);
+			dev_err(dev, "Write Characrters Respones  failed"
+					"xon/xoff software flow control\n");
+			return;
+		}
+		kfree(CharsRes);
+		/*Set  Rx/Tx Flow Contrl  Flag in ulFlowReplace*/
+		cp210x_read_reg_block(port, CP210X_GET_FLOW, &flow_ctl,sizeof(flow_ctl));
+		flow_repl = le32_to_cpu(flow_ctl.ulFlowReplace);
+		dev_dbg(dev, "%s - read ulControlHandshake=0x%08x, ulFlowReplace=0x%08x\n",
+				__func__, ctl_hs, flow_repl);
+		if (iflag & IXOFF)
+			flow_repl |= CP210X_SERIAL_AUTO_RECEIVE;
+		else
+			flow_repl &= ~CP210X_SERIAL_AUTO_RECEIVE;
+
+		if (iflag & IXON)
+			flow_repl |= CP210X_SERIAL_AUTO_TRANSMIT;
+		else
+			flow_repl &= ~CP210X_SERIAL_AUTO_TRANSMIT;
+
+		flow_ctl.ulFlowReplace = cpu_to_le32(flow_repl);
+		cp210x_write_reg_block(port, CP210X_SET_FLOW, &flow_ctl,sizeof(flow_ctl));
+       }
 }
 
 static int cp210x_tiocmset(struct tty_struct *tty,
-- 
2.17.1

