#!/usr/bin/env python3
#
# Copyright (c) Siemens AG, 2020-2022
#
# Authors:
#  Chao Zeng <chao.zeng@siemens.com>
#  Jan Kiszka <jan.kiszka@siemens.com>
#  Su Bao Cheng <baocheng.su@siemens.com>
#
# This file is subject to the terms and conditions of the MIT License.  See
# COPYING.MIT file in the top-level directory.
#
# To use this tool, an update package in <firmware-update-package>.tar.xz format is needed.
#
# The <firmware-update-package>.tar.xz should contain:
#   - firmware.bin: The firmware to update, could be more than one.
#   - update.conf.json: The update criteria.
#   - u-boot-initial-env: Builtin environment
#
# Example of update.conf.json:
# {
# 	"firmware": [
# 		{
# 			"description": "[optional] bla bla bla",
# 			"name": "pg1-basic-vx.y.z.bin",
# 			"version": "[optional] whatever",
# 			"target_boards": ["SIMATIC IOT2050 Basic", "SIMATIC IOT2050-ADVANCED"]
# 		},
# 		{
# 			"description": "[optional] bla bla bla",
# 			"name": "pg2-advanced-vx.y.z.bin",
# 			"version": "[optional] whatever",
# 			"target_boards": "SIMATIC IOT2050 Advanced PG2",
# 			"target_os": [
# 				{
# 					"type": "[optional] Example Image",
# 					"key": "BUILD_ID",
# 					"min_version": "V01.02.02"
# 				},
# 				{
# 					"type": "[optional] Industrial OS",
# 					"key": "VERSION_ID",
# 					"min_version": "3.1.1"
# 				}
# 			]
# 		}
# 	],
# 	"target_os": [
# 		{
# 			"type": "[optional] Example Image",
# 			"key": "BUILD_ID",
# 			"min_version": "V01.01.01"
# 		},
# 		{
# 			"type": "[optional] Industrial OS",
# 			"key": "VERSION_ID",
# 			"min_version": "2.1.1"
# 		}
# 	],
# 	"suggest_preserved_uboot_env": [
# 		 "boot_targets"
# 	]
# }
#
# There are one or more `firmware` node, each node represents one firmware file
# in the tarball and its update control fields, such as which board and which OS
# it could be updated upon.
#
# To indicate which board or boards the firmware could be updated upon, use the
# mandatory `target_boards` inside the `firmware` node. Possible target boards:
#   - PG1 Basic:
#       "SIMATIC IOT2050-BASIC", "SIMATIC IOT2050 Basic"
#   - PG1 Advanced:
#       "SIMATIC IOT2050-ADVANCED", "SIMATIC IOT2050 Advanced"
#   - PG2 Basic:
#       "SIMATIC IOT2050 Basic PG2"
#   - PG2 Advanced:
#       "SIMATIC IOT2050 Advanced PG2"
#   - M2 Variant:
#       "SIMATIC IOT2050 Advanced M2"
#
# To indicate which OS the firmware could be updated upon, use either the
# `target_os` inside the `firmware` node as a local configuration, or use
# a global `target_os` outside the `firmware` node as the global configuration.
# If both exists, the local one will overwrite the global one.
#
# Either global or local `target_os` is optional, if none exists, the updater
# will not check against the OS information.
#
# The `key` and `min_version` field within the `target_os` node will be compared
# to the value from `/etc/os-release` on the board. The `key` matches exactly, and
# the `min_version` matches the minimal version number.
#
# There are one `suggest_preserved_uboot_env` node, this filed in this node represent
# the env variable need to be preserved. there could be multiple fileds in this node.
# Besides, there is a control parameter "-p" to add the preserved list from cli, this would not
# use the preserved env variable in the `suggest_preserved_uboot_env` node.
#

import sys
import os
import fcntl
import struct
import mmap
import argparse
import tarfile
import json
import textwrap
from types import SimpleNamespace as Namespace
import subprocess
import tempfile
import hashlib
import io


class UpgradeError(Exception):
    def __init__(self, ErrorInfo):
        super().__init__(self)
        self.erroinfo = ErrorInfo

    def __str__(self):
        return self.erroinfo


class FirmwareUpdate(object):
    def __init__(self, firmware):
        self.firmware = firmware
        self.user_home = os.getenv('HOME')
        self.back_fw_path = os.path.join(self.user_home, ".rollback_fw")
        self.rollback_fw_tar = os.path.join(self.back_fw_path, 'rollback_backup_fw.tar')
        self.backup_fw_name = 'rollback_fw.bin'

    def get_path_type_value(self, path):
        """get the path value"""
        try:
            with open(path, "r") as f:
                return f.read()
        except IOError as e:
            raise UpgradeError("Reading {} failed: {}".format(path, e.strerror))

    @staticmethod
    def flash_erase(dev, start, nbytes):
        """This function erases flash sectors
        @dev: flash device file descriptor
        @start: start address
        @nbytes: number of bytes to erase
        """
        MEMERASE = 0x40084d02

        ioctl_data = struct.pack('II', start, nbytes)

        try:
            fcntl.ioctl(dev, MEMERASE, ioctl_data)
        except IOError:
            raise UpgradeError("Flash erasing failed")

    def get_mtd_info(self, mtd_num):
        ospi_dev_path = "/sys/bus/platform/devices/47040000.spi"
        if os.path.exists(ospi_dev_path + "/spi_master"):
            # kernel 5.9 and later
            spi_dev = os.listdir(ospi_dev_path + "/spi_master")[0]
            mtd_base_path = "{}/spi_master/{}/{}.0/mtd".format(
                ospi_dev_path, spi_dev, spi_dev)
        else:
            # kernel 5.8 and earlier
            mtd_base_path = "{}/mtd".format(ospi_dev_path)

        mtd_sys_path = "{}/mtd{}".format(mtd_base_path, mtd_num)
        mtd_name_path = "{}/name".format(mtd_sys_path)
        mtd_size_path = "{}/size".format(mtd_sys_path)
        mtd_erasesize_path = "{}/erasesize".format(mtd_sys_path)

        mtd_dev_path = "/dev/mtd{}".format(mtd_num)
        mtd_size = int(self.get_path_type_value(mtd_size_path))
        mtd_erasesize = int(self.get_path_type_value(mtd_erasesize_path))
        mtd_name = self.get_path_type_value(mtd_name_path).strip()

        return mtd_dev_path, mtd_size, mtd_erasesize, mtd_name

    def flash_operate(self, mtd_dev_path, mtd_size, mtd_erasesize, file_obj, file_size):
        mtd_pos = 0
        try:
            mtd_dev = os.open(mtd_dev_path, os.O_SYNC | os.O_RDWR)
        except IOError as e:
            raise UpgradeError("Opening {} failed: {}".format(mtd_dev_path, e.strerror))

        while mtd_pos < mtd_size and file_size > 0:
            mtd_content = os.read(mtd_dev, mtd_erasesize)
            firmware_content = file_obj.read(mtd_erasesize)
            padsize = mtd_erasesize - len(firmware_content)
            firmware_content += bytearray([0xff] * padsize)

            if not mtd_content == firmware_content:
                print("U", end="")
                sys.stdout.flush()
                self.flash_erase(mtd_dev, mtd_pos, mtd_erasesize)
                os.lseek(mtd_dev, mtd_pos, os.SEEK_SET)
                os.write(mtd_dev, firmware_content)
            else:
                print(".", end="")
                sys.stdout.flush()
            mtd_pos += mtd_erasesize
            file_size -= mtd_erasesize
        print()
        os.close(mtd_dev)
        return file_size

    def update_firmware(self):
        """Update Firmware"""
        mtd_num = 0

        print("===================================================")
        print("IOT2050 firmware update started - DO NOT INTERRUPT!")
        print("===================================================")

        self.firmware.seek(0)
        self.firmware.seek(0, os.SEEK_END)
        firmware_size = self.firmware.tell()
        self.firmware_len = firmware_size
        self.firmware.seek(0)

        while True:
            if firmware_size <= 0:
                break

            mtd_dev_path, mtd_size, mtd_erasesize, mtd_name = self.get_mtd_info(
                mtd_num)
            print("Updating %-20s" % mtd_name, end="")
            firmware_size = self.flash_operate(
                mtd_dev_path, mtd_size, mtd_erasesize, self.firmware, firmware_size)

            mtd_num += 1

        self.firmware_integrity_check()

        reboot_input = input(
            "\nWarning: Completed. Please reboot the device. Reboot now(y/N)? ")
        if not reboot_input == "y":
            sys.exit(1)
        os.system('reboot')

    def flash_md5_digest(self, firmware_len, mtd_num=0):
        flash_md5 = hashlib.md5()

        while True:
            if firmware_len <= 0:
                break

            mtd_dev_path, mtd_size, mtd_erasesize, mtd_name = self.get_mtd_info(
                mtd_num)

            mtd_pos = 0
            try:
                mtd_dev = os.open(mtd_dev_path, os.O_SYNC | os.O_RDWR)
            except IOError as e:
                raise UpgradeError("Opening {} failed: {}".format(mtd_dev_path, e.strerror))

            while mtd_pos < mtd_size and firmware_len > 0:
                mtd_content = os.read(mtd_dev, mtd_erasesize)
                flash_md5.update(mtd_content)

                mtd_pos += mtd_erasesize
                firmware_len -= mtd_erasesize

            os.close(mtd_dev)

            mtd_num += 1

        return flash_md5.hexdigest()

    def firmware_md5_digest(self):
        self.firmware.seek(0)
        firmware_md5 = hashlib.md5()

        for chunk in iter(lambda: self.firmware.read(4096), b""):
            firmware_md5.update(chunk)

        return firmware_md5.hexdigest()

    def firmware_integrity_check(self):
        firmware_md5_digest = self.firmware_md5_digest()
        firmware_flash_md5_digest = self.flash_md5_digest(self.firmware_len)

        if firmware_md5_digest != firmware_flash_md5_digest:
            raise UpgradeError("Firmware digest verification failed")

    def backup_firmware(self, firmware_length=0x8c0000):
        try:
            if not os.path.exists(self.back_fw_path):
                os.mkdir(self.back_fw_path)
        except OSError:
            raise UpgradeError("Failed to create path %s for firmware rollback" % self.back_fw_path)

        print("\nFirmware backup started")

        flash_md5_digest = []
        # The reason for reading twice. The uboot binary lacks a check code,
        # and reading the key flash data cannot be guaranteed to be 100%
        # correct.Therefore, the method of reading twice and comparing the
        # check code to reduce the chance error.
        i = 0
        while i < 2:
            mtd_num = 0
            mtd_in_memory = b''
            firmware_len = firmware_length

            flash_md5 = hashlib.md5()
            while True:
                if firmware_len <= 0:
                    break

                mtd_dev_path, mtd_size, mtd_erasesize, mtd_name = self.get_mtd_info(
                    mtd_num)

                mtd_pos = 0
                try:
                    mtd_dev = os.open(mtd_dev_path, os.O_SYNC | os.O_RDONLY)
                except IOError as e:
                    raise UpgradeError("Opening {} failed: {}".format(mtd_dev_path, e.strerror))

                while mtd_pos < mtd_size and firmware_len > 0:
                    mtd_content = os.read(mtd_dev, mtd_erasesize)
                    mtd_pos += mtd_erasesize
                    firmware_len -= mtd_erasesize
                    flash_md5.update(mtd_content)
                    mtd_in_memory += mtd_content

                os.close(mtd_dev)

                mtd_num += 1

            flash_md5_digest.append(flash_md5.hexdigest())
            i += 1

        if flash_md5_digest[0] != flash_md5_digest[1]:
            print("Firmware backup failed")
            sys.exit(1)

        info = tarfile.TarInfo(name=self.backup_fw_name)
        info.size = len(mtd_in_memory)
        with tarfile.TarFile(self.rollback_fw_tar, 'w') as tar:
            tar.addfile(info, io.BytesIO(mtd_in_memory))
        print('Firmware backup ended\n')


class BoardInformation(object):
    def __init__(self):
        self.board_name = self._get_board_name()

        print("Current board: {}".format(self.board_name))

        self.os_info = self._get_os_info()

    def _get_board_name(self) -> str:
        """
        Get the board name by checking the device tree node
        /proc/device-tree/model
        """
        with open('/proc/device-tree/model') as f_model:
            board_name = f_model.read().strip('\0')

        return board_name

    @staticmethod
    def _get_os_info() -> dict:
        '''
        Get the OS information by parsing the /etc/os-release

        Returned is a dict that converted from /etc/os-release, for example:
            NAME="debian"
            VERSION_ID="3.1.1" 

        => 
            {
                "NAME": "debian"
                "VERSION_ID": "3.1.1" 
            }
        '''
        with open('/etc/os-release') as f:
            return {l.split('=')[0]: l.strip().split('=')[-1].strip('"') for l in f.readlines()}


class UpdateConfiguration(object):
    def __init__(self, json_fileobj):
        # Deserialize the json file to an object so that we can use dot operator to access the fields.
        try:
            self._jsonobj = json.load(
                json_fileobj, object_hook=lambda d: Namespace(**d))
        except ValueError:
            raise UpgradeError("Decoding JSON has failed")

    def _check_os(self, target_os, os_info) -> bool:
        for tos in target_os:
            if tos.key in os_info and os_info[tos.key] >= (tos.min_version):
                return True

        return False

    def firmware_filter(self, board_name: str, os_info: dict) -> list:
        '''
        Filter out the firmwares that could not be updated on the current board and current OS.

        Return the list of the firmware names that could be updated.
        '''
        res = []
        for firmware in self._jsonobj.firmware:
            if board_name in firmware.target_boards:
                target_os = []
                try:
                    target_os = self._jsonobj.target_os
                except AttributeError:
                    pass

                # local target_os configuration prior to global
                try:
                    target_os = firmware.target_os
                except AttributeError:
                    pass

                # Only choose the firmware that have the target_os configuration identifying with current
                # OS info, or the firmware w/o target_os node which means it doesn't care the OS info.
                if len(target_os) == 0 or self._check_os(target_os, os_info):
                    res.append(firmware.name)

        return res

    def preserved_uboot_env(self):
        try:
            return self._jsonobj.suggest_preserved_uboot_env
        except Exception:
            raise UpgradeError("Get suggested preserved uboot env failed")


class ManagedFirmwareUpdate(FirmwareUpdate):
    '''
    ManagedFirmwareUpdate will perform various checking upon both the update package and the 
    targeted board, before calling the underlying FirmwareUpdate() to flash the binaries to
    the SPI flash.
    '''
    _update_conf_json = 'update.conf.json'
    uboot_default_env_file_name = 'u-boot-initial-env'

    def __init__(self, firmware):
        super().__init__(firmware)

        # Build the board information
        self._board_info = BoardInformation()

        # Parse the update configuration from the json file within the tarball
        self._update_conf = UpdateConfiguration(
            tarfile.open(fileobj=self.firmware).extractfile(self._update_conf_json))

        # extract file path
        self.extract_path = "/tmp"

    def update_firmware(self):
        # Get available firmwares by checking the board name and the os information
        firmware_names = self._update_conf.firmware_filter(
            self._board_info.board_name, self._board_info.os_info)

        if len(firmware_names) <= 0:
            raise UpgradeError("No firmware image could be updated on this board")

        if len(firmware_names) == 1:
            firmware_name = firmware_names[0]
        else:
            # Ask user to pick one firmware image to update
            print("Please select which firmware image to update:")
            for n in firmware_names:
                print("{}\t{}".format(firmware_names.index(n) + 1, n))

            choice = int(input("-> "))
            while choice > len(firmware_names) or choice < 1:
                print("Out of range, please reinput your choice:")
                choice = int(input("-> "))

            firmware_name = firmware_names[choice - 1]

        print("Will write {} to the SPI flash".format(firmware_name))

        self.firmware.seek(0)
        with tarfile.open(fileobj=self.firmware) as f:
            self.firmware = f.extractfile(firmware_name)
            file_tarfileinfo = f.getmember(name=self.uboot_default_env_file_name)
            file_tarfileinfo.uid = os.getuid()
            file_tarfileinfo.gid = os.getgid()
            f.extract(file_tarfileinfo, path=self.extract_path)
            super().update_firmware()

    def get_default_env_list(self, fname):
        with open(fname, 'r', encoding='utf-8') as f:
            default_env_list = [i.split('=')[0] for i in f.readlines()]
        return default_env_list

    def remove_line_by_index(self, file, index):
        with open(file, 'r+') as fp:
            lines = fp.readlines()
            fp.seek(0)
            fp.truncate()
            for number, line in enumerate(lines):
                if number != index:
                    fp.write(line)

    def remove_duplicate_default_env(self, uboot_env_file, env_list):
        default_env_list = self.get_default_env_list(uboot_env_file)
        for value in env_list:
            if value.split('=')[0] in default_env_list:
                value_index = default_env_list.index(value.split('=')[0])
                self.remove_line_by_index(uboot_env_file, value_index)

    def update_uboot_env(self, env_list):
        '''
        restore uboot env
        retrive the uboot default env file belong to the upgrade firmware.
        makeup the restore env binary and flash to the env mtd partition
        '''
        import shutil
        # /dev/mtd3     /dev/mtd4
        env_partition_list = [3, 4]
        uboot_default_env_file = os.path.join(
            self.extract_path, self.uboot_default_env_file_name)
        uboot_env_assemble_file = os.path.join(
            self.extract_path, "env_assemble_file")
        assert os.path.isfile(uboot_default_env_file)
        # assemble the env
        shutil.copy(uboot_default_env_file, uboot_env_assemble_file)
        self.remove_duplicate_default_env(uboot_env_assemble_file, env_list)

        with open(uboot_env_assemble_file, encoding="utf-8", mode="a") as file:
            for value in env_list:
                file.write(value)
                file.write("\n")

        with tempfile.NamedTemporaryFile() as env_default_binary:
            for mtd_num in env_partition_list:
                mtd_dev_path, mtd_size, mtd_erasesize, mtd_name = self.get_mtd_info(
                    mtd_num)
                try:
                    subprocess.run('mkenvimage -s {} -r -o {} {}'.format(mtd_size,
                                env_default_binary.name, uboot_env_assemble_file), check=True, shell=True)
                except subprocess.CalledProcessError as error:
                    print(error.stdout)
                    raise UpgradeError("Run mkenvimage failed")

                firmware_size = os.path.getsize(env_default_binary.name)

                while True:
                    if firmware_size <= 0:
                        break
                    print("Updating %-20s" % mtd_name, end="")
                    firmware_size = self.flash_operate(
                        mtd_dev_path, mtd_size, mtd_erasesize, env_default_binary, firmware_size)

            self.uboot_env_integrify_check(env_default_binary)

    def uboot_env_integrify_check(self, file_obj):
        file_obj.seek(0)

        env_md5 = hashlib.md5()
        env_md5.update(file_obj.read())
        env_file_md5_digest = env_md5.hexdigest()

        env_file_size = os.path.getsize(file_obj.name)
        env_flash_md5_digest = self.flash_md5_digest(env_file_size, mtd_num=3)

        if env_file_md5_digest != env_flash_md5_digest:
            raise UpgradeError("Env digest verification failed")

    def get_preserved_uboot_env(self, preserve_list):
        if preserve_list:
            preserved_uboot_env_name = [
                item for item in preserve_list.split(',')]
        else:
            preserved_uboot_env_name = self._update_conf.preserved_uboot_env()

        preserved_uboot_env_value = []

        if not preserved_uboot_env_name:
            return None

        for env_name in preserved_uboot_env_name:
            try:
                env_value = subprocess.run(
                    'fw_printenv %s' % env_name, shell=True, stdout=subprocess.PIPE, check=True) \
                    .stdout.decode('utf-8').lstrip().rstrip()
                preserved_uboot_env_value.append(env_value)
            except subprocess.CalledProcessError:
                pass

        return preserved_uboot_env_value


class RollbackFirmware(FirmwareUpdate):
    def rollback_firmware(self):
        if not os.path.exists(self.rollback_fw_tar) or not tarfile.is_tarfile(self.rollback_fw_tar):
            print('No rollback firmware exists')
            print('It could be that you have not done any upgrades')
            sys.exit(1)

        try:
            with tarfile.open(self.rollback_fw_tar) as f:
                self.firmware = f.extractfile(self.backup_fw_name)
                self.update_firmware()
        except tarfile.ExtractError:
            print("Extract rollback firmware error")


__version__ = "0.3"


def main(argv):
    description=textwrap.dedent('''\
        Update OSPI firmware.
        Examples:
        1. %(prog)s -f file.bin
             using binary format firmware
        2. %(prog)s  file.tar.xz
             using tarball format firmware
        3. %(prog)s -p "env1,env2" file.tar.xz
             using tarball format firmware, preserve environment follow -p
        4. %(prog)s -r file.tar.xz
             using tarball format firmware, reset environment
        5. %(prog)s -b
             rollback the firmware to the version before the upgrade
         ''')
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    group = parser.add_mutually_exclusive_group()
    parser.add_argument('firmware', nargs='?', metavar='FIRMWARE',
                        type=argparse.FileType('rb'),
                        help='firmware image or package')
    group.add_argument('-f', '--force',
                        help='Force update, ignore all the checking',
                        action='store_true')
    group.add_argument('-p', '--preserve_list',
                        type=str,
                        help='env preserve list, using comma to separate env')
    group.add_argument('-r', '--reset',
                        help='reset env to default value',
                        action='store_true')
    parser.add_argument('-v', '--version',
                        action='version',
                        version="%(prog)s version: " + __version__)
    group.add_argument('-b', '--rollback',
                        help='Rollback the firmware to the version before the upgrade',
                        action='store_true')
    parser.add_argument('-n', '--no-backup',
                        help='Do not generate a firmware backup',
                        action='store_true')
    try:
        args = parser.parse_args()
    except IOError as e:
        print(e.strerror, file=sys.stderr)
        exit(1)

    update_input = input(
        "\nWarning: Update may render device unbootable. Continue (y/N)? ")
    if not update_input == "y":
        sys.exit(1)

    if args.force or args.reset:
        erase_env_input = input("\nWarning: All U-Boot environment variables will be reset to factory settings. Continue (y/N)? ")
        if not erase_env_input == "y":
            sys.exit(1)
    try:
        if args.force:
            # When forced, ignore all the checking and call the underlying updater directly
            updater = FirmwareUpdate(args.firmware)
        elif args.rollback:
            updater = RollbackFirmware(args.firmware)
        else:
            updater = ManagedFirmwareUpdate(args.firmware)

        if args.rollback:
            rollback_confirm = input("\nRollback the firmware to the version before the upgrade (y/N)?")
            if not rollback_confirm == "y":
                sys.exit(1)
            updater.rollback_firmware()
            sys.exit(1)

        envlist = None
        if not args.force and not args.reset:
            envlist = updater.get_preserved_uboot_env(args.preserve_list)

        if not args.no_backup:
            updater.backup_firmware()
        updater.update_firmware()

        if envlist:
            print("\n")
            for env in envlist:
                print(env)
            preserved_env_input = input(
                "\nWarning: Preserve the above env variables. Confirm(Y/n)? ")
            if not preserved_env_input == "n":
                updater.update_uboot_env(envlist)
    except UpgradeError as e:
        print(e)
        intput_reminder = '''
        ====================================
        Upgrade Failed! Please do not reboot!!
        The Device may become brick.
        Please try to upgrade firmware again!
        ====================================
Hit any Key to Exit:
        '''
        # Rollback the firmware when the upgrade fails
        try:
            print('Warning: Upgrade failed, rollback started')
            updater.rollback_firmware()
        except UpgradeError:
            print("Rollback failed")

        input(intput_reminder)


if __name__ == '__main__':
    main(sys.argv)
